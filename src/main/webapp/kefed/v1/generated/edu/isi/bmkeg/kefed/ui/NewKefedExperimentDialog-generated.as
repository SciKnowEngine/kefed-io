
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    edu.isi.bmkeg.kefed.ui
 *  Class:      NewKefedExperimentDialog
 *  Source:     /Users/Gully/Documents/Projects/2_active/IEDB/work/kefedEditor/src/main/flex/edu/isi/bmkeg/kefed/ui/NewKefedExperimentDialog.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2017.08.30 16:17:00 PDT
 */

package edu.isi.bmkeg.kefed.ui
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Form;
import mx.containers.FormItem;
import mx.containers.HBox;
import mx.containers.TitleWindow;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.ComboBox;
import mx.controls.TextInput;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.ListEvent;
import mx.styles.*;



//  begin class def
public class NewKefedExperimentDialog
    extends mx.containers.TitleWindow
    implements mx.binding.IBindingClient
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var Citation : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var Description : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var Name : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var OkButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var Source : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var Type : mx.controls.ComboBox;

    [Bindable]
	/**
 * @private
 **/
    public var TypeField : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var TypeFieldItem : mx.containers.FormItem;

    [Bindable]
	/**
 * @private
 **/
    public var TypeFieldList : mx.containers.FormItem;

    [Bindable]
	/**
 * @private
 **/
    public var cancelButton : mx.controls.Button;


    //  type-import dummies


    //  Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.TitleWindow
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.VBox
        ,
        stylesFactory: function():void {
          this.horizontalAlign = "center";
        }
        ,
        propertiesFactory: function():Object { return {
          bottom: 10,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Form
              ,
              propertiesFactory: function():Object { return {
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.FormItem
                    ,
                    id: "TypeFieldList"
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Experiment Type",
                      visible: true,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.ComboBox
                          ,
                          id: "Type"
                          ,
                          events: {
                            change: "__Type_change"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            labelField: "modelName"
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.FormItem
                    ,
                    id: "TypeFieldItem"
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Experiment Type",
                      visible: false,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.TextInput
                          ,
                          id: "TypeField"
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.FormItem
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Experiment Label",
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.TextInput
                          ,
                          id: "Name"
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.FormItem
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Source",
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.TextInput
                          ,
                          id: "Source"
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.FormItem
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Citation Key",
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.TextInput
                          ,
                          id: "Citation"
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.FormItem
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Description",
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.TextInput
                          ,
                          id: "Description"
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.FormItem
                    ,
                    propertiesFactory: function():Object { return {
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.HBox
                          ,
                          propertiesFactory: function():Object { return {
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.Button
                                ,
                                id: "OkButton"
                                ,
                                propertiesFactory: function():Object { return {
                                  label: "OK"
                                }}
                              })
                            ,
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.Button
                                ,
                                id: "cancelButton"
                                ,
                                propertiesFactory: function():Object { return {
                                  label: "Cancel"
                                }}
                              })
                            ]
                          }}
                        })
                      ]
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function NewKefedExperimentDialog()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _NewKefedExperimentDialog_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_edu_isi_bmkeg_kefed_ui_NewKefedExperimentDialogWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return NewKefedExperimentDialog[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.layout = "absolute";
        this.showCloseButton = true;


        // events


        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


    //  scripts
    //  <Script>, line 9 - 33

			import mx.collections.ArrayCollection;
			
			[Bindable]
			public var editable:Boolean = true;

			/** A list of template descriptor objects.  These must
			 *  have entries for "modelName" and "source".
			 */
			[Bindable]
			public var templateList:ArrayCollection;
			
			/** Sets the input fields for the given model type.
			 *  The model descriptor must have fields for "modelName"
			 *  and "source", which are used to fill in the appropriate
			 *  input fields in the dialog.
			 *  
			 * @param model The new model descriptor object
			 */
			public function setFieldsForType(model:Object):void {
				Name.text = model.modelName;
				Source.text = model.source;
				Citation.text = model.citeKey;
			}
		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function __Type_change(event:mx.events.ListEvent):void
{
	setFieldsForType(Type.selectedItem);
}


    //  binding mgmt
    private function _NewKefedExperimentDialog_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            null,
            null,
            "Type.dataProvider"
            , "templateList");

        result[1] = new mx.binding.Binding(this,
            null,
            null,
            "Type.editable"
            , "editable");

        result[2] = new mx.binding.Binding(this,
            null,
            null,
            "TypeField.editable"
            , "editable");

        result[3] = new mx.binding.Binding(this,
            null,
            null,
            "Name.editable"
            , "editable");

        result[4] = new mx.binding.Binding(this,
            null,
            null,
            "Source.editable"
            , "editable");

        result[5] = new mx.binding.Binding(this,
            null,
            null,
            "Citation.editable"
            , "editable");

        result[6] = new mx.binding.Binding(this,
            null,
            null,
            "Description.editable"
            , "editable");


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (NewKefedExperimentDialog)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
