
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    edu.isi.bmkeg.kefed.ui
 *  Class:      TypeTemplateForm
 *  Source:     /Users/Gully/Documents/Projects/2_active/IEDB/work/kefedEditor/src/main/flex/edu/isi/bmkeg/kefed/ui/TypeTemplateForm.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2017.08.30 16:17:00 PDT
 */

package edu.isi.bmkeg.kefed.ui
{

import edu.isi.bmkeg.kefed.elements.KefedBaseValueTemplate;
import edu.isi.bmkeg.kefed.elements.KefedFieldTemplate;
import edu.isi.bmkeg.kefed.ontology.OntologySearchInterface;
import edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent;
import edu.isi.bmkeg.kefed.ui.FieldTemplateTabs;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.ArrayCollection;
import mx.containers.HBox;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.ComboBox;
import mx.controls.DataGrid;
import mx.controls.Label;
import mx.controls.Spacer;
import mx.controls.TextInput;
import mx.controls.dataGridClasses.DataGridColumn;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.states.AddChild;
import mx.states.State;
import mx.styles.*;


[States("True_False_State", "Date_State", "Time_State", "DateTime_State", "Image_State", "File_State", "Term_State", "Text_State", "Text_List_State", "Long_Text_State", "Region_State", "String_State", "Integer_State", "Decimal_State", "Decimal_with_units_State", "Table_State")]

//  begin class def
public class TypeTemplateForm
    extends mx.containers.VBox
    implements mx.binding.IBindingClient
{

    //  instance variables
/**
 * @private
 **/
    public var _TypeTemplateForm_AllowedValuesListComponent1 : edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent;

/**
 * @private
 **/
    public var _TypeTemplateForm_AllowedValuesListComponent2 : edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent;

/**
 * @private
 **/
    public var _TypeTemplateForm_AllowedValuesListComponent3 : edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent;

/**
 * @private
 **/
    public var _TypeTemplateForm_AllowedValuesListComponent4 : edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent;

/**
 * @private
 **/
    public var _TypeTemplateForm_AllowedValuesListComponent5 : edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent;

/**
 * @private
 **/
    public var _TypeTemplateForm_AllowedValuesListComponent6 : edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent;

/**
 * @private
 **/
    public var _TypeTemplateForm_AllowedValuesListComponent7 : edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent;

/**
 * @private
 **/
    public var _TypeTemplateForm_HBox13 : mx.containers.HBox;

/**
 * @private
 **/
    public var _TypeTemplateForm_TextInput1 : mx.controls.TextInput;

/**
 * @private
 **/
    public var _TypeTemplateForm_TextInput2 : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var addFieldButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var fieldTypeForm : edu.isi.bmkeg.kefed.ui.FieldTemplateTabs;

    [Bindable]
	/**
 * @private
 **/
    public var maxDecimalValue : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var maxIntegerValue : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var maxUnitValue : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var minDecimalValue : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var minIntegerValue : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var minUnitValue : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var moveValueDownButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var moveValueUpButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var multislotGrid : mx.controls.DataGrid;

    [Bindable]
	/**
 * @private
 **/
    public var removeFieldButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var typeItem : mx.containers.HBox;

    [Bindable]
	/**
 * @private
 **/
    public var typeList : mx.controls.ComboBox;

    [Bindable]
	/**
 * @private
 **/
    public var typeOptions : mx.collections.ArrayCollection;


    //  type-import dummies


    //  Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.VBox
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HBox
        ,
        id: "typeItem"
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.ComboBox
              ,
              id: "typeList"
              ,
              events: {
                valueCommit: "__typeList_valueCommit"
              }
              ,
              propertiesFactory: function():Object { return {
                rowCount: 9,
                dataProvider: _TypeTemplateForm_ArrayCollection1_i()
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function TypeTemplateForm()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _TypeTemplateForm_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_edu_isi_bmkeg_kefed_ui_TypeTemplateFormWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return TypeTemplateForm[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.states = [_TypeTemplateForm_State1_c(), _TypeTemplateForm_State2_c(), _TypeTemplateForm_State3_c(), _TypeTemplateForm_State4_c(), _TypeTemplateForm_State5_c(), _TypeTemplateForm_State6_c(), _TypeTemplateForm_State7_c(), _TypeTemplateForm_State8_c(), _TypeTemplateForm_State9_c(), _TypeTemplateForm_State10_c(), _TypeTemplateForm_State11_c(), _TypeTemplateForm_State12_c(), _TypeTemplateForm_State13_c(), _TypeTemplateForm_State14_c(), _TypeTemplateForm_State15_c(), _TypeTemplateForm_State16_c()];


        // events
        this.addEventListener("creationComplete", ___TypeTemplateForm_VBox1_creationComplete);


        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


    //  scripts
    //  <Script>, line 15 - 219


	import mx.controls.listClasses.ListBase;
	import edu.isi.bmkeg.kefed.ontology.OntologySearchInterface;
	import mx.utils.StringUtil;
	import mx.controls.dataGridClasses.DataGridColumn;
	
	import mx.events.FlexEvent;
	import mx.managers.PopUpManager;
	import mx.collections.ArrayCollection;
	import mx.binding.utils.BindingUtils;

	import edu.isi.bmkeg.kefed.elements.KefedObject;
	import edu.isi.bmkeg.kefed.elements.KefedBaseValueTemplate;
	import edu.isi.bmkeg.kefed.elements.KefedFullValueTemplate;
	import edu.isi.bmkeg.kefed.elements.KefedFieldTemplate;
	
	private static const SLOT_PREFIX:String = "Field-";
	private static const FIELD_WIDTH:Number = 100; // Width of min/max value fields.
	
	[Bindable]
	public var myType:KefedBaseValueTemplate;
	
	/** Ontology search interface to be used for term lookup.
	 *  Required for proper finding of ontology terms for fields
	 *  in table types and eventually for term data values.
	 */
	[Bindable]
	public var termLookupService:OntologySearchInterface;

	
	/** Monotonic controls whether only monotonic changes are allowed
	 *  or whether all changes are allowed.  Monotonic changes only 
	 *  allow additional values to be added to the allowed values or
	 *  allowed units sections.  Renaming or removal of values are
	 *  prohibited when monotonic is <code>true</code>
	 */
	[Bindable]
	public var monotonic:Boolean = false;

	public static var typeUpdateMap:Object = {"multiple slots": "Table",
		                                       "table"        : "Table",
											   "number"       : "Decimal",
											   "number with units" : "Decimal with units",
											   "true or false" : "True/False",
											   "string"        : "Text"}
	
	
	/** Initialize this by adjusting the allowed values for the types
	 *  depending on whether this is a full or a base value type template.
	 * 
	 *  Full values allows table values whereas base values do not.
	 */
	public function initTypeOptions():void {
		if (myType != null) {
			if (myType is KefedFullValueTemplate) {
				typeOptions.addItem("Table");
			}
			// Update for changed name.  Should be temporary!
			if (typeUpdateMap[myType.valueTypeName] != null) {
				myType.valueTypeName = typeUpdateMap[myType.valueTypeName];
			}
			var typeIndex:int = typeOptions.getItemIndex(myType.valueTypeName);
			if (typeIndex == -1) typeIndex = typeOptions.getItemIndex(KefedBaseValueTemplate.DEFAULT_VALUE_TYPE);
			typeList.selectedIndex = typeIndex;
		}
	}	
	
    /** Change the type of the object in the slot of the object itself
	 *  Update the state to reflect the correct input view for this type
	 *
	 * @param event The event triggered by the type change
	 */
    private function handleVariableTypeChange (event:FlexEvent):void {
    	var typeobj:Object = ComboBox(event.currentTarget).selectedItem;
    	if (typeobj != null && myType != null) {
    		myType.valueTypeName = String(typeobj);
    		currentState = ((typeobj as String).split(" ")).join("_").replace("/","_") + "_State";
    	} else {
    		currentState = "";
    	}
    }
    
  	/** Handle change in selection of field row
	 */
    private function handleFieldChange (evt:Event):void {
    	trace("HandleFieldChange selected=" + multislotGrid.selectedIndex);
    	reactToFieldChange();
    }
    
    /** Handle selected row change on the multiSlotGrid
    */
    private function reactToFieldChange():void {
    	var index:int = multislotGrid.selectedIndex;
		var enable:Boolean = (index != -1);
		removeFieldButton.enabled = enable;
		moveValueUpButton.enabled = enable && index > 0 ;
		moveValueDownButton.enabled = enable && index < (myType as KefedFullValueTemplate).multipleSlotFields.length - 1 ;
		fieldTypeForm.enabled = enable;
	} 
	
	/** Add a new field row and set the editor for it.
	 */
	private function addField():void {
		var field:KefedFieldTemplate = new KefedFieldTemplate();
		// Give the slot a 1-based index name as an initial value.
		var index:int = (myType as KefedFullValueTemplate).multipleSlotFields.length + 1;
		field.nameValue = SLOT_PREFIX + index;
		(myType as KefedFullValueTemplate).multipleSlotFields.addItem(field);
		multislotGrid.selectedIndex = (myType as KefedFullValueTemplate).multipleSlotFields.length - 1;
		multislotGrid.scrollToIndex(multislotGrid.selectedIndex);
		reactToFieldChange();
		fieldTypeForm.variableDataNameControl.setFocus();
		fieldTypeForm.variableDataNameControl.setSelection(0,fieldTypeForm.variableDataNameControl.text.length);		
	}
	
	/** Generate a new field name that is not the same as an existing field name.
	 *  TODO:  Figure out if this is too general a solution.  Perhaps just using
	 *         Slot + index would work just as well.
	 *
	 *  @param template The value template that contains the table fields
	 *  @return The new field name
	 */
	private function newFieldName(template:KefedFullValueTemplate):String {
		var count:int = 1;
		var newName:String = SLOT_PREFIX + count++;
		while (template.getFieldTemplate(newName) != null) {
			newName = SLOT_PREFIX + count++;
		}
		return newName;
	}
	 
    /** Remove selected field row
    */
    private function removeField():void {
		var i:int = multislotGrid.selectedIndex;
		if (i >= 0) {
			(myType as KefedFullValueTemplate).multipleSlotFields.removeItemAt(i);
			//  TODO: Adjust selected index to leave something selected.
			multislotGrid.selectedIndex = -1;
		}
		reactToFieldChange();
	}
	
	 private function setSelectedIndex(list:ListBase, index:int):void {
     	list.selectedIndex = index;
     }
	
	/** Move the selected field to an earlier place on the list.
     * 
     * @param evt Button click event
     */
     private function moveFieldUp(evt:Event):void {
     	var index:int = multislotGrid.selectedIndex;
     	// Make sure we have a selection and a place to move it.
     	if (index != -1 && index > 0) {
     		var itemToMove:Object = (myType as KefedFullValueTemplate).multipleSlotFields.removeItemAt(index);
     		(myType as KefedFullValueTemplate).multipleSlotFields.addItemAt(itemToMove, index - 1);
     		callLater(setSelectedIndex, [multislotGrid, index - 1]);
     	}
     }
     
    /** Move the selected field to an later place on the list.
     * 
     * @param evt Button click event
     */
     private function moveFieldDown(evt:Event):void {
    	var index:int = multislotGrid.selectedIndex;
     	// Make sure we have a selection and a place to move it.
     	if (index != -1 && index < (myType as KefedFullValueTemplate).multipleSlotFields.length - 1) {
     		var itemToMove:Object = (myType as KefedFullValueTemplate).multipleSlotFields.removeItemAt(index);
     		(myType as KefedFullValueTemplate).multipleSlotFields.addItemAt(itemToMove, index + 1);
     		callLater(setSelectedIndex, [multislotGrid, index + 1]); 
     	}    	
     }
	
	/** Return the type name (typeValue field) of the column's BaseValueTemplate object.
	 */
	private function getTypeName(item:Object, column:DataGridColumn):String {
		return (item as KefedFieldTemplate).valueType.valueTypeName;
	}
	
	/** Handler to update a slot based on the value entered
	 *  into a text field
	 * 
	 * @param evt The event triggered by the textinput value change
	 * @param slotName The name of the slot to be updated
	 */
	private function updateValue(evt:Event, slotName:String):void {
		var input:TextInput = evt.target as TextInput;
		myType[slotName] = StringUtil.trim(input.text);
	}
	
	/** Hook to give us somewhere to place a break point.
	 */
	 private function doDebug():void {
	     var i:int = 3;
	 }
    
    /** Debugging aid */
    private function showEvent(evt:Event):void {
    	trace("Event " + evt + "  target=" + evt.target);
    }
    
 	

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _TypeTemplateForm_State1_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "True_False_State";
	temp.overrides = [_TypeTemplateForm_AddChild1_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild1_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_Label1_c);
	return temp;
}

private function _TypeTemplateForm_Label1_c() : mx.controls.Label
{
	var temp : mx.controls.Label = new mx.controls.Label();
	temp.text = "No additional options";
	temp.setStyle("fontStyle", "italic");
	if (!temp.document) temp.document = this;
	return temp;
}

private function _TypeTemplateForm_State2_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Date_State";
	temp.overrides = [_TypeTemplateForm_AddChild2_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild2_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_Label2_c);
	return temp;
}

private function _TypeTemplateForm_Label2_c() : mx.controls.Label
{
	var temp : mx.controls.Label = new mx.controls.Label();
	temp.text = "No additional options yet";
	temp.setStyle("fontStyle", "italic");
	if (!temp.document) temp.document = this;
	return temp;
}

private function _TypeTemplateForm_State3_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Time_State";
	temp.overrides = [_TypeTemplateForm_AddChild3_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild3_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_Label3_c);
	return temp;
}

private function _TypeTemplateForm_Label3_c() : mx.controls.Label
{
	var temp : mx.controls.Label = new mx.controls.Label();
	temp.text = "No additional options yet";
	temp.setStyle("fontStyle", "italic");
	if (!temp.document) temp.document = this;
	return temp;
}

private function _TypeTemplateForm_State4_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "DateTime_State";
	temp.overrides = [_TypeTemplateForm_AddChild4_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild4_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_Label4_c);
	return temp;
}

private function _TypeTemplateForm_Label4_c() : mx.controls.Label
{
	var temp : mx.controls.Label = new mx.controls.Label();
	temp.text = "No additional options yet";
	temp.setStyle("fontStyle", "italic");
	if (!temp.document) temp.document = this;
	return temp;
}

private function _TypeTemplateForm_State5_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Image_State";
	temp.overrides = [_TypeTemplateForm_AddChild5_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild5_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox2_c);
	return temp;
}

private function _TypeTemplateForm_VBox2_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Label
		        ,
		        stylesFactory: function():void {
		          this.fontWeight = "bold";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          text: "Allowed Image File Patterns"
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent
		        ,
		        id: "_TypeTemplateForm_AllowedValuesListComponent1"
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          allowOtherValuesFlagName: "allowFreePatternInput"
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

private function _TypeTemplateForm_State6_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "File_State";
	temp.overrides = [_TypeTemplateForm_AddChild6_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild6_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox3_c);
	return temp;
}

private function _TypeTemplateForm_VBox3_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Label
		        ,
		        stylesFactory: function():void {
		          this.fontWeight = "bold";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          text: "Allowed File Patterns"
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent
		        ,
		        id: "_TypeTemplateForm_AllowedValuesListComponent2"
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          allowOtherValuesFlagName: "allowFreePatternInput"
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

private function _TypeTemplateForm_State7_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Term_State";
	temp.overrides = [_TypeTemplateForm_AddChild7_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild7_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox4_c);
	return temp;
}

private function _TypeTemplateForm_VBox4_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Label
		        ,
		        stylesFactory: function():void {
		          this.fontWeight = "bold";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          text: "Allowed Values"
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent
		        ,
		        id: "_TypeTemplateForm_AllowedValuesListComponent3"
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          allowOtherValuesFlagName: "allowFreeValueInput"
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Spacer
		        ,
		        propertiesFactory: function():Object { return {
		          height: 3
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.HBox
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Label
		              ,
		              propertiesFactory: function():Object { return {
		                text: "Name Lookup Field"
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.TextInput
		              ,
		              id: "_TypeTemplateForm_TextInput1"
		              ,
		              events: {
		                change: "___TypeTemplateForm_TextInput1_change"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                toolTip: "Field or function to use to get the ontology term from the name in the list."
		              }}
		            })
		          ]
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___TypeTemplateForm_TextInput1_change(event:flash.events.Event):void
{
	updateValue(event, 'termLookupFunction');
}

private function _TypeTemplateForm_State8_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Text_State";
	temp.overrides = [_TypeTemplateForm_AddChild8_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild8_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_Label9_c);
	return temp;
}

private function _TypeTemplateForm_Label9_c() : mx.controls.Label
{
	var temp : mx.controls.Label = new mx.controls.Label();
	temp.text = "No additional options yet";
	temp.setStyle("fontStyle", "italic");
	if (!temp.document) temp.document = this;
	return temp;
}

private function _TypeTemplateForm_State9_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Text_List_State";
	temp.overrides = [_TypeTemplateForm_AddChild9_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild9_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox5_c);
	return temp;
}

private function _TypeTemplateForm_VBox5_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Label
		        ,
		        stylesFactory: function():void {
		          this.fontWeight = "bold";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          text: "Allowed Values"
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent
		        ,
		        id: "_TypeTemplateForm_AllowedValuesListComponent4"
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          allowOtherValuesFlagName: "allowFreeValueInput",
		          orderAllowed: true
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

private function _TypeTemplateForm_State10_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Long_Text_State";
	temp.overrides = [_TypeTemplateForm_AddChild10_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild10_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_Label11_c);
	return temp;
}

private function _TypeTemplateForm_Label11_c() : mx.controls.Label
{
	var temp : mx.controls.Label = new mx.controls.Label();
	temp.text = "No additional options yet";
	temp.setStyle("fontStyle", "italic");
	if (!temp.document) temp.document = this;
	return temp;
}

private function _TypeTemplateForm_State11_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Region_State";
	temp.overrides = [_TypeTemplateForm_AddChild11_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild11_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox6_c);
	return temp;
}

private function _TypeTemplateForm_VBox6_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Label
		        ,
		        stylesFactory: function():void {
		          this.fontWeight = "bold";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          text: "Allowed Region Names"
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent
		        ,
		        id: "_TypeTemplateForm_AllowedValuesListComponent5"
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          percentHeight: 80.0,
		          allowOtherValues: true,
		          allowOtherValuesFlagName: "allowFreeValueInput"
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Spacer
		        ,
		        propertiesFactory: function():Object { return {
		          height: 3
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.HBox
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Label
		              ,
		              propertiesFactory: function():Object { return {
		                text: "Lookup Function"
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.TextInput
		              ,
		              id: "_TypeTemplateForm_TextInput2"
		              ,
		              events: {
		                change: "___TypeTemplateForm_TextInput2_change"
		              }
		            })
		          ]
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___TypeTemplateForm_TextInput2_change(event:flash.events.Event):void
{
	updateValue(event, 'termLookupFunction');
}

private function _TypeTemplateForm_State12_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "String_State";
	temp.overrides = [_TypeTemplateForm_AddChild12_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild12_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox7_c);
	return temp;
}

private function _TypeTemplateForm_VBox7_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Label
		        ,
		        stylesFactory: function():void {
		          this.fontWeight = "bold";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          text: "Allowed Values"
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent
		        ,
		        id: "_TypeTemplateForm_AllowedValuesListComponent6"
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          allowOtherValuesFlagName: "allowFreeValueInput"
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

private function _TypeTemplateForm_State13_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Integer_State";
	temp.overrides = [_TypeTemplateForm_AddChild13_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild13_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox8_c);
	return temp;
}

private function _TypeTemplateForm_VBox8_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.HBox
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: mx.containers.HBox
		              ,
		              propertiesFactory: function():Object { return {
		                percentWidth: 50.0,
		                childDescriptors: [
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.Label
		                    ,
		                    propertiesFactory: function():Object { return {
		                      text: "Minimum"
		                    }}
		                  })
		                ,
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.TextInput
		                    ,
		                    id: "minIntegerValue"
		                    ,
		                    events: {
		                      change: "__minIntegerValue_change"
		                    }
		                  })
		                ]
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.containers.HBox
		              ,
		              propertiesFactory: function():Object { return {
		                percentWidth: 50.0,
		                childDescriptors: [
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.Label
		                    ,
		                    propertiesFactory: function():Object { return {
		                      text: "Maximum"
		                    }}
		                  })
		                ,
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.TextInput
		                    ,
		                    id: "maxIntegerValue"
		                    ,
		                    events: {
		                      change: "__maxIntegerValue_change"
		                    }
		                  })
		                ]
		              }}
		            })
		          ]
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

/**
 * @private
 **/
public function __minIntegerValue_change(event:flash.events.Event):void
{
	updateValue(event, 'minimumValue');
}

/**
 * @private
 **/
public function __maxIntegerValue_change(event:flash.events.Event):void
{
	updateValue(event, 'maximumValue');
}

private function _TypeTemplateForm_State14_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Decimal_State";
	temp.overrides = [_TypeTemplateForm_AddChild14_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild14_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox9_c);
	return temp;
}

private function _TypeTemplateForm_VBox9_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.HBox
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: mx.containers.HBox
		              ,
		              propertiesFactory: function():Object { return {
		                percentWidth: 50.0,
		                childDescriptors: [
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.Label
		                    ,
		                    propertiesFactory: function():Object { return {
		                      text: "Minimum"
		                    }}
		                  })
		                ,
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.TextInput
		                    ,
		                    id: "minDecimalValue"
		                    ,
		                    events: {
		                      change: "__minDecimalValue_change"
		                    }
		                  })
		                ]
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.containers.HBox
		              ,
		              propertiesFactory: function():Object { return {
		                percentWidth: 50.0,
		                childDescriptors: [
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.Label
		                    ,
		                    propertiesFactory: function():Object { return {
		                      text: "Maximum"
		                    }}
		                  })
		                ,
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.TextInput
		                    ,
		                    id: "maxDecimalValue"
		                    ,
		                    events: {
		                      change: "__maxDecimalValue_change"
		                    }
		                  })
		                ]
		              }}
		            })
		          ]
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

/**
 * @private
 **/
public function __minDecimalValue_change(event:flash.events.Event):void
{
	updateValue(event, 'minimumValue');
}

/**
 * @private
 **/
public function __maxDecimalValue_change(event:flash.events.Event):void
{
	updateValue(event, 'maximumValue');
}

private function _TypeTemplateForm_State15_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Decimal_with_units_State";
	temp.overrides = [_TypeTemplateForm_AddChild15_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild15_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox10_c);
	return temp;
}

private function _TypeTemplateForm_VBox10_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.HBox
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: mx.containers.HBox
		              ,
		              propertiesFactory: function():Object { return {
		                percentWidth: 50.0,
		                childDescriptors: [
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.Label
		                    ,
		                    propertiesFactory: function():Object { return {
		                      text: "Minimum"
		                    }}
		                  })
		                ,
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.TextInput
		                    ,
		                    id: "minUnitValue"
		                    ,
		                    events: {
		                      change: "__minUnitValue_change"
		                    }
		                  })
		                ]
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.containers.HBox
		              ,
		              propertiesFactory: function():Object { return {
		                percentWidth: 50.0,
		                childDescriptors: [
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.Label
		                    ,
		                    propertiesFactory: function():Object { return {
		                      text: "Maximum"
		                    }}
		                  })
		                ,
		                  new mx.core.UIComponentDescriptor({
		                    type: mx.controls.TextInput
		                    ,
		                    id: "maxUnitValue"
		                    ,
		                    events: {
		                      change: "__maxUnitValue_change"
		                    }
		                  })
		                ]
		              }}
		            })
		          ]
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Spacer
		        ,
		        propertiesFactory: function():Object { return {
		          height: 6
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Label
		        ,
		        stylesFactory: function():void {
		          this.fontWeight = "bold";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          text: "Allowed Units"
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.AllowedValuesListComponent
		        ,
		        id: "_TypeTemplateForm_AllowedValuesListComponent7"
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          percentHeight: 80.0,
		          allowOtherValuesFlagName: "allowFreeUnitInput"
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

/**
 * @private
 **/
public function __minUnitValue_change(event:flash.events.Event):void
{
	updateValue(event, 'minimumValue');
}

/**
 * @private
 **/
public function __maxUnitValue_change(event:flash.events.Event):void
{
	updateValue(event, 'maximumValue');
}

private function _TypeTemplateForm_State16_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Table_State";
	temp.overrides = [_TypeTemplateForm_AddChild16_c()];
	return temp;
}

private function _TypeTemplateForm_AddChild16_c() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_TypeTemplateForm_VBox11_c);
	return temp;
}

private function _TypeTemplateForm_VBox11_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.DataGrid
		        ,
		        id: "multislotGrid"
		        ,
		        events: {
		          change: "__multislotGrid_change"
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          name: "MultislotGrid",
		          percentWidth: 100.0,
		          percentHeight: 30.0,
		          minHeight: 65,
		          editable: false,
		          columns: [_TypeTemplateForm_DataGridColumn1_c(), _TypeTemplateForm_DataGridColumn2_c(), _TypeTemplateForm_DataGridColumn3_c()]
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.HBox
		        ,
		        id: "_TypeTemplateForm_HBox13"
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "addFieldButton"
		              ,
		              events: {
		                click: "__addFieldButton_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "+",
		                enabled: true,
		                toolTip: "Add a new field to end."
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Spacer
		              ,
		              propertiesFactory: function():Object { return {
		                width: 5
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "removeFieldButton"
		              ,
		              events: {
		                click: "__removeFieldButton_click"
		              }
		              ,
		              stylesFactory: function():void {
		                this.fontWeight = "bold";
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "-",
		                enabled: false,
		                toolTip: "Remove the selected field."
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "moveValueUpButton"
		              ,
		              events: {
		                click: "__moveValueUpButton_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "^",
		                enabled: false,
		                toolTip: "Move selected item up (earlier) in list"
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "moveValueDownButton"
		              ,
		              events: {
		                click: "__moveValueDownButton_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "v",
		                enabled: false,
		                toolTip: "Move selected item down (later) in list"
		              }}
		            })
		          ]
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Spacer
		        ,
		        propertiesFactory: function():Object { return {
		          height: 10
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.FieldTemplateTabs
		        ,
		        id: "fieldTypeForm"
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          percentHeight: 65.0,
		          minHeight: 120
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

private function _TypeTemplateForm_DataGridColumn1_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Name";
	temp.dataField = "nameValue";
	return temp;
}

private function _TypeTemplateForm_DataGridColumn2_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Terms";
	temp.dataField = "ontologyIds";
	return temp;
}

private function _TypeTemplateForm_DataGridColumn3_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Type";
	temp.dataField = "valueType";
	temp.labelFunction = getTypeName;
	return temp;
}

/**
 * @private
 **/
public function __multislotGrid_change(event:mx.events.ListEvent):void
{
	handleFieldChange(event)
}

/**
 * @private
 **/
public function __addFieldButton_click(event:flash.events.MouseEvent):void
{
	addField();
}

/**
 * @private
 **/
public function __removeFieldButton_click(event:flash.events.MouseEvent):void
{
	removeField();
}

/**
 * @private
 **/
public function __moveValueUpButton_click(event:flash.events.MouseEvent):void
{
	moveFieldUp(event)
}

/**
 * @private
 **/
public function __moveValueDownButton_click(event:flash.events.MouseEvent):void
{
	moveFieldDown(event)
}

/**
 * @private
 **/
public function ___TypeTemplateForm_VBox1_creationComplete(event:mx.events.FlexEvent):void
{
	initTypeOptions()
}

private function _TypeTemplateForm_ArrayCollection1_i() : mx.collections.ArrayCollection
{
	var temp : mx.collections.ArrayCollection = new mx.collections.ArrayCollection();
	temp.source = ["True/False", "Integer", "Decimal", "Decimal with units", "Term", "Text", "Text List", "Long Text", "Region", "Date", "Time", "DateTime", "File", "Image"];
	temp.initialized(this, "typeOptions")
	typeOptions = temp;
	mx.binding.BindingManager.executeBindings(this, "typeOptions", typeOptions);
	return temp;
}

/**
 * @private
 **/
public function __typeList_valueCommit(event:mx.events.FlexEvent):void
{
	handleVariableTypeChange(event)
}


    //  binding mgmt
    private function _TypeTemplateForm_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (!monotonic);
            },
            null,
            "typeList.enabled"
            );

        result[1] = new mx.binding.Binding(this,
            function():int
            {

                return (typeOptions.getItemIndex(myType.valueTypeName));
            },
            null,
            "typeList.selectedIndex"
            );

        result[2] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent1.myType"
            , "myType");

        result[3] = new mx.binding.Binding(this,
            function():mx.collections.ArrayCollection
            {

                return (myType.allowedPatterns);
            },
            null,
            "_TypeTemplateForm_AllowedValuesListComponent1.allowedValues"
            );

        result[4] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent1.monotonic"
            , "monotonic");

        result[5] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent2.myType"
            , "myType");

        result[6] = new mx.binding.Binding(this,
            function():mx.collections.ArrayCollection
            {

                return (myType.allowedPatterns);
            },
            null,
            "_TypeTemplateForm_AllowedValuesListComponent2.allowedValues"
            );

        result[7] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent2.monotonic"
            , "monotonic");

        result[8] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent3.myType"
            , "myType");

        result[9] = new mx.binding.Binding(this,
            function():mx.collections.ArrayCollection
            {

                return (myType.allowedValues);
            },
            null,
            "_TypeTemplateForm_AllowedValuesListComponent3.allowedValues"
            );

        result[10] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent3.monotonic"
            , "monotonic");

        result[11] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (myType.termLookupFunction);
                return (result == undefined ? null : String(result));
            },
            null,
            "_TypeTemplateForm_TextInput1.text"
            );

        result[12] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent4.myType"
            , "myType");

        result[13] = new mx.binding.Binding(this,
            function():mx.collections.ArrayCollection
            {

                return (myType.allowedValues);
            },
            null,
            "_TypeTemplateForm_AllowedValuesListComponent4.allowedValues"
            );

        result[14] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent4.monotonic"
            , "monotonic");

        result[15] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent5.myType"
            , "myType");

        result[16] = new mx.binding.Binding(this,
            function():mx.collections.ArrayCollection
            {

                return (myType.allowedValues);
            },
            null,
            "_TypeTemplateForm_AllowedValuesListComponent5.allowedValues"
            );

        result[17] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent5.monotonic"
            , "monotonic");

        result[18] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (myType.termLookupFunction);
                return (result == undefined ? null : String(result));
            },
            null,
            "_TypeTemplateForm_TextInput2.text"
            );

        result[19] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent6.myType"
            , "myType");

        result[20] = new mx.binding.Binding(this,
            function():mx.collections.ArrayCollection
            {

                return (myType.allowedValues);
            },
            null,
            "_TypeTemplateForm_AllowedValuesListComponent6.allowedValues"
            );

        result[21] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent6.monotonic"
            , "monotonic");

        result[22] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (myType.minimumValue);
                return (result == undefined ? null : String(result));
            },
            null,
            "minIntegerValue.text"
            );

        result[23] = new mx.binding.Binding(this,
            function():Number
            {

                return (FIELD_WIDTH);
            },
            null,
            "minIntegerValue.width"
            );

        result[24] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (myType.maximumValue);
                return (result == undefined ? null : String(result));
            },
            null,
            "maxIntegerValue.text"
            );

        result[25] = new mx.binding.Binding(this,
            function():Number
            {

                return (FIELD_WIDTH);
            },
            null,
            "maxIntegerValue.width"
            );

        result[26] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (myType.minimumValue);
                return (result == undefined ? null : String(result));
            },
            null,
            "minDecimalValue.text"
            );

        result[27] = new mx.binding.Binding(this,
            function():Number
            {

                return (FIELD_WIDTH);
            },
            null,
            "minDecimalValue.width"
            );

        result[28] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (myType.maximumValue);
                return (result == undefined ? null : String(result));
            },
            null,
            "maxDecimalValue.text"
            );

        result[29] = new mx.binding.Binding(this,
            function():Number
            {

                return (FIELD_WIDTH);
            },
            null,
            "maxDecimalValue.width"
            );

        result[30] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (myType.minimumValue);
                return (result == undefined ? null : String(result));
            },
            null,
            "minUnitValue.text"
            );

        result[31] = new mx.binding.Binding(this,
            function():Number
            {

                return (FIELD_WIDTH);
            },
            null,
            "minUnitValue.width"
            );

        result[32] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (myType.maximumValue);
                return (result == undefined ? null : String(result));
            },
            null,
            "maxUnitValue.text"
            );

        result[33] = new mx.binding.Binding(this,
            function():Number
            {

                return (FIELD_WIDTH);
            },
            null,
            "maxUnitValue.width"
            );

        result[34] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent7.myType"
            , "myType");

        result[35] = new mx.binding.Binding(this,
            function():mx.collections.ArrayCollection
            {

                return (myType.allowedUnits);
            },
            null,
            "_TypeTemplateForm_AllowedValuesListComponent7.allowedValues"
            );

        result[36] = new mx.binding.Binding(this,
            null,
            null,
            "_TypeTemplateForm_AllowedValuesListComponent7.monotonic"
            , "monotonic");

        result[37] = new mx.binding.Binding(this,
            function():Object
            {

                return ((myType as KefedFullValueTemplate).multipleSlotFields);
            },
            null,
            "multislotGrid.dataProvider"
            );

        result[38] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (!monotonic);
            },
            null,
            "_TypeTemplateForm_HBox13.enabled"
            );

        result[39] = new mx.binding.Binding(this,
            function():edu.isi.bmkeg.kefed.elements.KefedFieldTemplate
            {

                return (KefedFieldTemplate(multislotGrid.selectedItem));
            },
            null,
            "fieldTypeForm.myObject"
            );

        result[40] = new mx.binding.Binding(this,
            null,
            null,
            "fieldTypeForm.termLookupService"
            , "termLookupService");

        result[41] = new mx.binding.Binding(this,
            null,
            null,
            "fieldTypeForm.monotonic"
            , "monotonic");

        result[42] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (multislotGrid.selectedItem != null);
            },
            null,
            "fieldTypeForm.enabled"
            );


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (TypeTemplateForm)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
