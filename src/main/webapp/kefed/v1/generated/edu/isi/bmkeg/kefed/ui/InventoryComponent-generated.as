
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    edu.isi.bmkeg.kefed.ui
 *  Class:      InventoryComponent
 *  Source:     /Users/Gully/Documents/Projects/2_active/IEDB/work/kefedEditor/src/main/flex/edu/isi/bmkeg/kefed/ui/InventoryComponent.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2017.08.30 16:17:00 PDT
 */

package edu.isi.bmkeg.kefed.ui
{

import edu.isi.bmkeg.kefed.ui.CreditBox;
import edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxList;
import edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxRenderer;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Accordion;
import mx.containers.ControlBar;
import mx.containers.HDividedBox;
import mx.containers.Panel;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.DataGrid;
import mx.controls.Label;
import mx.controls.Spacer;
import mx.controls.TextArea;
import mx.controls.dataGridClasses.DataGridColumn;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.styles.*;



//  begin class def
public class InventoryComponent
    extends mx.containers.HDividedBox
    implements mx.binding.IBindingClient
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var copyDesignButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var copyExperimentButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var deleteDesignButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var deleteExperimentButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var designCount : mx.controls.Label;

    [Bindable]
	/**
 * @private
 **/
    public var editDesignButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var editExperimentButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var experimentCount : mx.controls.Label;

    [Bindable]
	/**
 * @private
 **/
    public var experimentGrid : mx.controls.DataGrid;

    [Bindable]
	/**
 * @private
 **/
    public var exportDesignButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var exportExperimentButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var importDesignButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var importExperimentButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var list : edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxList;

    [Bindable]
	/**
 * @private
 **/
    public var newDesignButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var newExperimentButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var selectedOntologiesLabel : mx.controls.TextArea;

    [Bindable]
	/**
 * @private
 **/
    public var templateGrid : mx.controls.DataGrid;


    //  type-import dummies


    //  Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.HDividedBox
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Panel
        ,
        propertiesFactory: function():Object { return {
          title: "Ontology List",
          percentWidth: 0.0,
          percentHeight: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.VBox
              ,
              stylesFactory: function():void {
                this.paddingLeft = 10;
                this.paddingBottom = 10;
                this.paddingRight = 10;
                this.paddingTop = 10;
              }
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 100.0,
                percentHeight: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxList
                    ,
                    id: "list"
                    ,
                    events: {
                      initialize: "__list_initialize",
                      change: "__list_change"
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 100.0,
                      labelField: "fullName",
                      itemRenderer: _InventoryComponent_ClassFactory1_c(),
                      showDataTips: true,
                      dataTipField: "description",
                      allowMultipleSelection: true
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.TextArea
                    ,
                    id: "selectedOntologiesLabel"
                    ,
                    stylesFactory: function():void {
                      this.borderVisible = false;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      text: "All",
                      editable: false
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.Accordion
        ,
        propertiesFactory: function():Object { return {
          percentHeight: 100.0,
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Panel
              ,
              propertiesFactory: function():Object { return {
                label: "Credits",
                percentHeight: 100.0,
                percentWidth: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: edu.isi.bmkeg.kefed.ui.CreditBox
                    ,
                    propertiesFactory: function():Object { return {
                      componentName: "BioScholar Application"
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Panel
              ,
              propertiesFactory: function():Object { return {
                label: "Experimental Designs",
                percentWidth: 100.0,
                percentHeight: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.DataGrid
                    ,
                    id: "templateGrid"
                    ,
                    events: {
                      doubleClick: "__templateGrid_doubleClick",
                      change: "__templateGrid_change"
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 100.0,
                      editable: false,
                      doubleClickEnabled: true,
                      columns: [_InventoryComponent_DataGridColumn1_c(), _InventoryComponent_DataGridColumn2_c(), _InventoryComponent_DataGridColumn3_c()]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.ControlBar
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Label
                          ,
                          id: "designCount"
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Spacer
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "newDesignButton"
                          ,
                          events: {
                            click: "__newDesignButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "New Design"
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "copyDesignButton"
                          ,
                          events: {
                            click: "__copyDesignButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Copy Design",
                            enabled: false
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "editDesignButton"
                          ,
                          events: {
                            click: "__editDesignButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Edit Design",
                            enabled: false
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "deleteDesignButton"
                          ,
                          events: {
                            click: "__deleteDesignButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Delete Design",
                            enabled: false
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Spacer
                          ,
                          propertiesFactory: function():Object { return {
                            width: 15
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "importDesignButton"
                          ,
                          events: {
                            click: "__importDesignButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Import Design",
                            enabled: true,
                            toolTip: "New design imported from a local file."
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "exportDesignButton"
                          ,
                          events: {
                            click: "__exportDesignButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Export Design",
                            enabled: false,
                            toolTip: "Export selected design to a local file."
                          }}
                        })
                      ]
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Panel
              ,
              propertiesFactory: function():Object { return {
                label: "Observations",
                percentWidth: 100.0,
                percentHeight: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.DataGrid
                    ,
                    id: "experimentGrid"
                    ,
                    events: {
                      doubleClick: "__experimentGrid_doubleClick",
                      change: "__experimentGrid_change"
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 100.0,
                      editable: false,
                      doubleClickEnabled: true,
                      columns: [_InventoryComponent_DataGridColumn4_c(), _InventoryComponent_DataGridColumn5_c(), _InventoryComponent_DataGridColumn6_c(), _InventoryComponent_DataGridColumn7_c()]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.ControlBar
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Label
                          ,
                          id: "experimentCount"
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Spacer
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "newExperimentButton"
                          ,
                          events: {
                            click: "__newExperimentButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "New Experiment"
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "copyExperimentButton"
                          ,
                          events: {
                            click: "__copyExperimentButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Copy Experiment",
                            enabled: false
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "editExperimentButton"
                          ,
                          events: {
                            click: "__editExperimentButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Edit Experiment",
                            enabled: false
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "deleteExperimentButton"
                          ,
                          events: {
                            click: "__deleteExperimentButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Delete Experiment",
                            enabled: false
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Spacer
                          ,
                          propertiesFactory: function():Object { return {
                            width: 15
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "importExperimentButton"
                          ,
                          events: {
                            click: "__importExperimentButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Import Experiment",
                            enabled: true,
                            toolTip: "New experiment imported from a local file."
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "exportExperimentButton"
                          ,
                          events: {
                            click: "__exportExperimentButton_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Export Experiment",
                            enabled: false,
                            toolTip: "Export selected experiment to a local file."
                          }}
                        })
                      ]
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function InventoryComponent()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _InventoryComponent_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_edu_isi_bmkeg_kefed_ui_InventoryComponentWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return InventoryComponent[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.percentWidth = 100.0;
        this.percentHeight = 100.0;


        // events
        this.addEventListener("preinitialize", ___InventoryComponent_HDividedBox1_preinitialize);
        this.addEventListener("creationComplete", ___InventoryComponent_HDividedBox1_creationComplete);


        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


    //  scripts
    //  <Script>, line 12 - 753

		import edu.isi.bmkeg.kefed.app.KefedAppEvent;
		import edu.isi.bmkeg.kefed.app.KefedAppEventDispatcher;
		import edu.isi.bmkeg.kefed.elements.KefedExperiment;
		import edu.isi.bmkeg.kefed.elements.KefedModel;
		import edu.isi.bmkeg.kefed.store.DataStoreEvent;
		import edu.isi.bmkeg.kefed.store.IDataStore;
		import edu.isi.bmkeg.kefed.store.IModelStore;
		import edu.isi.bmkeg.kefed.store.ModelStoreEvent;
		import edu.isi.bmkeg.kefed.store.json.JSONSerializer;

		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.core.Application;
		import mx.core.FlexGlobals;
		import mx.core.IFlexDisplayObject;
		import mx.events.CloseEvent;
		import mx.managers.CursorManager;
		import mx.managers.PopUpManager;
		import mx.rpc.events.FaultEvent;

		[Bindable]
		public var modelStore:IModelStore;

		[Bindable]
		public var schemaStore:IModelStore = null;

		[Bindable]
		public var dataStore:IDataStore;

		[Bindable]
		private var templateList:ArrayCollection;

		[Bindable]
		public var ontologyList:ArrayCollection;

		[Bindable]
		private var template:KefedModel;

		[Bindable]
		private var experimentList:ArrayCollection;

		[Bindable]
		private var experiment:KefedExperiment;

		[Bindable]
		private var designCountText:String = "0 designs";
		[Bindable]
		private var experimentCountText:String = "0 experiments";

		/** File references used for importing and exporting models or experiments.
		 *   Needs to be a field so that the scope is maintained
		 *   across multiple method calls.  Just extracting the
		 *   value from the Event's target fails.
		 */
		private var importFileRef:FileReference = null;
		private var exportFileRef:FileReference = null;


		private var deletePopup:ConfirmDeleteDialog;
		// TODO:  Unify naming.  This is a bit incoherent at the moment because
		//        the old nomenclature was Template and Model and the new names
		//        are Model and Experiment.
		private var newDesignPopup:NewKefedTemplateDialog;
		private var newExperimentPopup:NewKefedExperimentDialog;

		// Flags to control behavior of the selection lists after they
		// have been refreshed.  If this is true, then the last item
		// in the list is selected.  This will be set true after adding
		// a new item, so it can be immediately selected for editing.
		private var selectLastModel:Boolean = false;
		private var selectLastExperiment:Boolean = false;

		public function init():void {

			FlexGlobals.topLevelApplication.addEventListener(KeyboardEvent.KEY_DOWN, checkKeys);

			modelStore.addEventListener(ModelStoreEvent.LIST, handleListKefedTemplates);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
			modelStore.addEventListener(ModelStoreEvent.DELETE, handleDeleteKefedTemplate);
			modelStore.addEventListener(ModelStoreEvent.INSERT, handleInsertKefedTemplate);
			modelStore.addEventListener(ModelStoreEvent.SAVE, handleSaveKefedTemplate);
			modelStore.addEventListener(FaultEvent.FAULT, callError);

			dataStore.addEventListener(DataStoreEvent.LIST, handleListKefedExperiments);
			dataStore.addEventListener(DataStoreEvent.RETRIEVE, handleLoadKefedExperiment);
			dataStore.addEventListener(DataStoreEvent.DELETE, handleDeleteKefedExperiment);
			dataStore.addEventListener(DataStoreEvent.INSERT, handleInsertKefedExperiment);
			dataStore.addEventListener(DataStoreEvent.SAVE, handleSaveKefedExperiment);
			dataStore.addEventListener(FaultEvent.FAULT, callError);

			if (FlexGlobals.topLevelApplication.eventDispatcher != null) {
				var ed:EventDispatcher = FlexGlobals.topLevelApplication.eventDispatcher;
				ed.addEventListener(KefedAppEvent.SAVE_DATA_EDIT, saveEditedExperiment);
				ed.addEventListener(KefedAppEvent.SAVE_DESIGN_EDIT, saveEditedModel);
				ed.addEventListener(KefedAppEvent.CANCEL_DESIGN_EDIT, returnToDashboard);
				ed.addEventListener(KefedAppEvent.CANCEL_DATA_EDIT, returnToDashboard);
			}

		}

		private function checkKeys(e:KeyboardEvent):void {

			if (e.charCode == 20) { // Control-T
				FlexGlobals.topLevelApplication.currentState = "Dashboard_State";
			} else if (e.charCode == 10) { // Control-J
				FlexGlobals.topLevelApplication.currentState = "JSONform";
			} else if (e.charCode == 14) { // Control-N
				FlexGlobals.topLevelApplication.currentState = "Connectivity_State";
			} else if (e.charCode == 16) { // Control-P
				FlexGlobals.topLevelApplication.currentState = "PowerLoomForm";
			}
		}

		public function refresh(e:Event = null):void {
			CursorManager.setBusyCursor();
			modelStore.listModels();
			CursorManager.setBusyCursor(); // Set again, since each handler pops one.
			dataStore.listData();
		}

		/** Respond to changes in the template selection window by
		 *  enabling and disabling the action buttons that require a
		 *  selection.
		 *
		 *  TODO: Should this change be coordinated with the models
		 *  displayed in the experiment window?  It would seem that
		 *  might make the display a bit more scalable, especially if
		 *  there end up being a lot of experiments of a particular type.
		 *  Perhaps make that a user-selectable option?
		 *
		 * @param evt The event
		 */
		private function handleTemplateChange(evt:Event):void {
			if (templateGrid != null) {
				var enable:Boolean = (templateGrid.selectedIndex != -1);
				copyDesignButton.enabled = enable;
				editDesignButton.enabled = enable;
				deleteDesignButton.enabled = enable;
				exportDesignButton.enabled = enable;
			}
		}

		/** Respond to changes in the model/data selection window by
		 *  enabling and disabling the action buttons that require a
		 *  selection
		 *
		 * @param evt The event
		 */
		private function handleExperimentChange(evt:Event):void {
			if (experimentGrid != null) {
				var enable:Boolean = (experimentGrid.selectedIndex != -1);
				copyExperimentButton.enabled = enable;
				editExperimentButton.enabled = enable;
				deleteExperimentButton.enabled = enable;
				exportExperimentButton.enabled = enable;
			}
		}


		/**
		 * New Templates
		 */
		private function newTemplate():void {
			newDesignPopup = PopUpManager.createPopUp(this, NewKefedTemplateDialog, true) as NewKefedTemplateDialog;
			newDesignPopup.title = "Create new KEfED Design";
			newDesignPopup.addEventListener(CloseEvent.CLOSE, closeNewTemplateDialog);
			newDesignPopup.OkButton.addEventListener(MouseEvent.CLICK, insertNewTemplate);
			newDesignPopup.cancelButton.addEventListener(MouseEvent.CLICK, closeNewTemplateDialog);
			mx.managers.PopUpManager.centerPopUp(newDesignPopup);
		}

		private function insertNewTemplate(e:Event):void {
			if (newDesignPopup.Name.text != null && newDesignPopup.Name.text != "") {
				CursorManager.setBusyCursor();
				var model:KefedModel = new KefedModel();
				model.type = "template";
				model.modelName = newDesignPopup.Name.text;
				model.source = newDesignPopup.Source.text;
				model.citeKey = newDesignPopup.Citation.text;
				model.description = newDesignPopup.Description.text;
				model.updateTime();
				modelStore.insertModel(model);
				selectLastModel = true;
			}
			closeNewTemplateDialog(e);
		}

		private function closeNewTemplateDialog(e:Event):void {
			mx.managers.PopUpManager.removePopUp(newDesignPopup);
		}

		private function handleInsertKefedTemplate(e:ModelStoreEvent):void {
			trace("Insert Template Handler");
			modelStore.listModels();
		}

		/**
		 * Delete a Template
		 */
		private function deleteTemplate():void {

			deletePopup = ConfirmDeleteDialog(
					PopUpManager.createPopUp(this, ConfirmDeleteDialog, true));

			deletePopup.addEventListener("close", cancelDeleteTemplate);
			deletePopup["cancelButton"].addEventListener("click", cancelDeleteTemplate);
			deletePopup["okButton"].addEventListener("click", confirmDeleteTemplate);
			mx.managers.PopUpManager.centerPopUp(deletePopup);

		}

		private function confirmDeleteTemplate(event:MouseEvent):void {
			var i:int = templateGrid.selectedIndex;
			var o:Object = templateList[i];
			var uid:String = o.uid;
			CursorManager.setBusyCursor();
			modelStore.deleteModel(uid);
			PopUpManager.removePopUp(deletePopup);
		}

		private function cancelDeleteTemplate(event:MouseEvent):void {
			PopUpManager.removePopUp(deletePopup);
		}

		private function handleDeleteKefedTemplate(e:ModelStoreEvent):void {
			modelStore.listModels();
		}

		/**
		 * Copy a Template
		 */
		private function copyTemplate():void {
			// Copy a template by reading it in, and then using the handler to
			// make a clone and insert it into the store.
			var i:int = templateGrid.selectedIndex;
			var o:Object = templateList[i];
			var uid:String = o.uid;
			CursorManager.setBusyCursor();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleCopyKefedTemplate);
			modelStore.retrieveModel(uid);
		}

		private function handleCopyKefedTemplate(e:ModelStoreEvent):void {
			trace("Copy template handler", e, " model=", e.model);
			var model:KefedModel = e.model.clone();
			model.modelName = model.modelName + " copy";
			model.updateTime();
			model.updateUID();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleCopyKefedTemplate);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
			modelStore.insertModel(model);
			selectLastModel = true;
		}

		/**
		 * Edit a Template
		 */
		private function editTemplate():void {
			var i:int = templateGrid.selectedIndex;
			// Sometimes a double click will be registered in response to
			// double clicks with a modifier key down.
			// cause a selection on the first click, followed by a de-selection
			// on the second click. 
			// Also, double clicks for sorting in the headers also trigger 
			// the double-click linked editing function.
			// So we make sure that we really have a 
			// selected item before we actually try to get it.  - tar
			if (i > -1) {
				var o:Object = templateList[i];
				var uid:String = o.uid;
				trace("Load model from uid", uid);
				CursorManager.setBusyCursor();
				modelStore.retrieveModel(uid);
				trace("Finished loading call", uid);
			}
		}

		private function handleListKefedTemplates(e:ModelStoreEvent):void {
			// trace("Handle List Templates");
			CursorManager.removeBusyCursor();
			this.templateList = e.modelList;
			if (this.templateList.length == 1) {
				this.designCountText = "1 design";
			} else {
				this.designCountText = this.templateList.length + " designs";
			}
			if (selectLastModel) {
				templateGrid.selectedIndex = this.templateList.length - 1;
				templateGrid.scrollToIndex(templateGrid.selectedIndex);
				selectLastModel = false;
			}
			handleTemplateChange(e);
		}

		private function handleLoadKefedTemplate(e:ModelStoreEvent):void {
			trace("Load template handler", e, " model=", e.model);
			CursorManager.removeBusyCursor();
			this.template = e.model;

			if (FlexGlobals.topLevelApplication.eventDispatcher != null) {
				FlexGlobals.topLevelApplication.currentState = "Design_State";
				FlexGlobals.topLevelApplication.eventDispatcher.dispatchBioScholarEvent(KefedAppEvent.EDIT_DESIGN, this.template);
			}
		}

		private function saveEditedModel(e:Event):void {
			CursorManager.setBusyCursor();
			this.template.updateTime();
			modelStore.saveModel(this.template);
			if (schemaStore != null) {
				schemaStore.saveModel(this.template);
			}
		}

		private function handleSaveKefedTemplate(e:ModelStoreEvent):void {
			CursorManager.removeBusyCursor();
			this.refresh();
		}

		/**
		 * Import or Export templates
		 */
		private function exportTemplate(e:Event):void {
			var i:int = templateGrid.selectedIndex;
			if (i > -1) {
				var o:Object = templateList[i];
				var uid:String = o.uid;
				CursorManager.setBusyCursor();
				modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
				modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleExportKefedTemplate);
				modelStore.retrieveModel(uid);
				exportDesignButton.enabled = false;
			}
		}

		private function handleExportKefedTemplate(e:ModelStoreEvent):void {
			trace("Export template handler", e, " model=", e.model);
			CursorManager.removeBusyCursor();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleExportKefedTemplate);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
			this.template = e.model;
			newDesignPopup = PopUpManager.createPopUp(this, NewKefedTemplateDialog, true) as NewKefedTemplateDialog;
			newDesignPopup.title = "Export this design";
			newDesignPopup.editable = false;
			newDesignPopup.Name.text = template.modelName;
			newDesignPopup.Source.text = template.source;
			newDesignPopup.Citation.text = template.citeKey;
			newDesignPopup.Description.text = template.description;
			newDesignPopup.addEventListener(CloseEvent.CLOSE, closeNewTemplateDialog);
			newDesignPopup.OkButton.addEventListener(MouseEvent.CLICK, exportCurrentTemplate);
			newDesignPopup.cancelButton.addEventListener(MouseEvent.CLICK, closeNewTemplateDialog);
			mx.managers.PopUpManager.centerPopUp(newDesignPopup);
		}

		private function exportCurrentTemplate(evt:Event):void {
			mx.managers.PopUpManager.removePopUp(newDesignPopup);
			exportFileRef = new FileReference();
			exportFileRef.addEventListener(Event.COMPLETE, exportTemplateCompleted);
			exportFileRef.addEventListener(Event.CANCEL, exportTemplateCanceled);
			var defaultFilename:String = template.modelName.replace(/ /g, "-") + ".json";
			exportFileRef.save(JSONSerializer.serializeKefedModel(template, false), defaultFilename);
		}


		private function exportTemplateCompleted(evt:Event):void {
			exportDesignButton.enabled = true;
			exportFileRef = null; // Release resources
		}

		private function exportTemplateCanceled(evt:Event):void {
			exportDesignButton.enabled = true;
			exportFileRef = null; // Release resources
		}

		private function importTemplate(e:Event):void {
			importFileRef = new FileReference();
			importFileRef.addEventListener(Event.SELECT, importFileSelected);
			importFileRef.addEventListener(Event.COMPLETE, importLoadCompleted)
			importFileRef.addEventListener(FaultEvent.FAULT, callError);
			importFileRef.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
			try {
				importFileRef.browse([new FileFilter("JSON Files", "*.json;*.txt")]);
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}
		}

		private function importFileSelected(evt:Event):void {
			// trace("Selected, preparing to load. name=" + fileRef.name + " date=" + fileRef.creationDate);
			try {
				importFileRef.load();
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}
		}

		private function importLoadCompleted(evt:Event):void {
			trace("File size = " + importFileRef.data.length);
			try {
				var jsonText:String = importFileRef.data.readMultiByte(importFileRef.data.length, "iso-8859-1");
				var coll:ArrayCollection = JSONSerializer.deserializeKefedModel(jsonText)
				var models:ArrayCollection = new ArrayCollection();
				for each(var o:Object in coll) {
					if(o.type == 'template') {
						models.addItem(o);
					}
				}
				modelStore.removeEventListener(ModelStoreEvent.INSERT, handleInsertKefedTemplate);
				modelStore.addEventListener(ModelStoreEvent.INSERT, handleInsertImportedTemplate);
				CursorManager.setBusyCursor();
				modelStore.insertModelList(models.toArray());
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}

			importFileRef = null; // To free data storage.
		}


		private function handleInsertImportedTemplate(evt:Event):void {
			CursorManager.removeBusyCursor();
			modelStore.removeEventListener(ModelStoreEvent.INSERT, handleInsertImportedTemplate);
			modelStore.addEventListener(ModelStoreEvent.INSERT, handleInsertKefedTemplate);
			this.refresh(evt);
		}


		/**
		 * New experiments
		 */
		private function newExperiment():void {
			newExperimentPopup = PopUpManager.createPopUp(this, NewKefedExperimentDialog, true) as NewKefedExperimentDialog;
			newExperimentPopup.title = "Add New KEfED Experiment...";
			newExperimentPopup.templateList = this.templateList;
			if (templateGrid != null) {
				newExperimentPopup.Type.selectedIndex = templateGrid.selectedIndex;
				if (templateGrid.selectedIndex != -1) { // If a template is selected, use it to pre-populate the menu.
					newExperimentPopup.setFieldsForType(this.templateList.getItemAt(templateGrid.selectedIndex));
				}
			}
			newExperimentPopup.addEventListener(CloseEvent.CLOSE, closeNewExperimentDialog);
			newExperimentPopup.OkButton.addEventListener(MouseEvent.CLICK, insertNewExperiment);
			newExperimentPopup.cancelButton.addEventListener(MouseEvent.CLICK, closeNewExperimentDialog);
			mx.managers.PopUpManager.centerPopUp(newExperimentPopup);
		}

		private function insertNewExperiment(e:Event):void {
			if (newExperimentPopup.Name.text != null && newExperimentPopup.Name.text != "") {
				CursorManager.setBusyCursor();
				// BUG: Needs to copy the existing model that matches the
				//      selected type, and use that to store things here.
				var uid:String = newExperimentPopup.Type.selectedItem["uid"];
				modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
				modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleNewKefedExperiment);
				modelStore.retrieveModel(uid);
			}
		}

		private function closeNewExperimentDialog(e:Event):void {
			mx.managers.PopUpManager.removePopUp(newExperimentPopup);
		}

		private function handleNewKefedExperiment(e:ModelStoreEvent):void {
			trace("Copy model for new experiment handler", e, " model=", e.model);
			var exp:KefedExperiment = new KefedExperiment(e.model, true);
			exp.id = null;
			exp.modelName = newExperimentPopup.Name.text;
			exp.source = newExperimentPopup.Source.text;
			exp.citeKey = newExperimentPopup.Citation.text;
			exp.description = newExperimentPopup.Description.text;
			exp.designUid = e.model.uid;
//			exp.reference = newExperimentPopup.Reference.text;
//			exp.caseId = newExperimentPopup.CaseId;
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleNewKefedExperiment);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedTemplate);
			dataStore.insertData(exp);  // Assigns new id.
			selectLastExperiment = true;
			mx.managers.PopUpManager.removePopUp(newExperimentPopup);
		}


		private function handleInsertKefedExperiment(e:DataStoreEvent):void {
			trace("Insert Experiment Handler");
			dataStore.listData();
		}


		/**
		 * Delete an Experiment
		 */
		private function deleteExperiment():void {

			deletePopup = ConfirmDeleteDialog(
					PopUpManager.createPopUp(this, ConfirmDeleteDialog, true));

			deletePopup.addEventListener("close", cancelDeleteExperiment);
			deletePopup["cancelButton"].addEventListener("click", cancelDeleteExperiment);
			deletePopup["okButton"].addEventListener("click", confirmDeleteExperiment);
			mx.managers.PopUpManager.centerPopUp(deletePopup);

		}

		private function confirmDeleteExperiment(event:MouseEvent):void {
			var i:int = experimentGrid.selectedIndex;
			var o:Object = experimentList[i];
			var uid:String = o.uid;
			cursorManager.setBusyCursor();
			dataStore.deleteData(uid);
			PopUpManager.removePopUp(deletePopup);
		}

		private function cancelDeleteExperiment(event:MouseEvent):void {
			PopUpManager.removePopUp(deletePopup);
		}

		private function handleDeleteKefedExperiment(e:DataStoreEvent):void {
			cursorManager.removeBusyCursor();
			refresh();
		}

		private function handleListKefedExperiments(e:DataStoreEvent):void {
//			trace("Handle List Experiments");
			CursorManager.removeBusyCursor();
			this.experimentList = e.experimentList;
			if (this.experimentList.length == 1) {
				this.experimentCountText = "1 experiment";
			} else {
				this.experimentCountText = this.experimentList.length + " experiments";
			}
			if (selectLastExperiment) {
				experimentGrid.selectedIndex = this.experimentList.length - 1;
				experimentGrid.scrollToIndex(experimentGrid.selectedIndex);
				selectLastExperiment = false;
			}
			handleExperimentChange(e);
		}

		/**
		 * Copy an Experiment
		 */
		private function copyExperiment():void {
			// Copy an experiment by reading it in, and then using the handler to
			// make a clone and insert it into the store.
			var i:int = templateGrid.selectedIndex;
			var o:Object = templateList[i];
			var uid:String = o.uid;
			CursorManager.setBusyCursor();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedExperiment);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleCopyKefedExperiment);
			modelStore.retrieveModel(uid);
		}

		private function handleCopyKefedExperiment(e:ModelStoreEvent):void {
			trace("Copy template handler", e, " model=", e.model);
			var exp:KefedExperiment = KefedExperiment(e.model.clone());
			exp.modelName = experiment.modelName + " copy";
			exp.updateUID();
			modelStore.removeEventListener(ModelStoreEvent.RETRIEVE, handleCopyKefedExperiment);
			modelStore.addEventListener(ModelStoreEvent.RETRIEVE, handleLoadKefedExperiment);
			dataStore.insertData(exp);
			selectLastExperiment = true;
		}

		/**
		 * Edit an Experiment
		 */
		private function editExperiment():void {
			var i:int = experimentGrid.selectedIndex;

			// Sometimes a double click will be registered in response to
			// double clicks with a modifier key down.
			// cause a selection on the first click, followed by a de-selection
			// on the second click. 
			// Also, double clicks for sorting in the headers also trigger 
			// the double-click linked editing function.
			// So we make sure that we really have a 
			// selected item before we actually try to get it.  - tar
			if (i > -1) {
				cursorManager.setBusyCursor();
				var o:Object = experimentList[i];
				var uid:String = o.uid;
				dataStore.retrieveData(uid);
			}
		}

		private function handleLoadKefedExperiment(e:DataStoreEvent):void {
			cursorManager.removeBusyCursor();
			this.experiment = e.experiment;

			if (FlexGlobals.topLevelApplication.eventDispatcher != null) {
				FlexGlobals.topLevelApplication.currentState = "ExperimentData_State";
				FlexGlobals.topLevelApplication.eventDispatcher.dispatchBioScholarEvent(KefedAppEvent.EDIT_DATA, this.experiment);
			}
		}

		/**
		 * Save an Experiment
		 */

		private function saveEditedExperiment(e:Event):void {
			cursorManager.setBusyCursor();
			this.experiment.updateTime();
			dataStore.saveData(this.experiment);
		}

		private function handleSaveKefedExperiment(event:DataStoreEvent):void {
			cursorManager.removeBusyCursor();
			this.refresh();
		}

		/**
		 * Import or Export experiments
		 */

		private function exportExperiment(e:Event):void {
			var i:int = experimentGrid.selectedIndex;
			if (i > -1) {
				var o:Object = experimentList[i];
				var uid:String = o.uid;
				CursorManager.setBusyCursor();
				dataStore.removeEventListener(DataStoreEvent.RETRIEVE, handleLoadKefedExperiment);
				dataStore.addEventListener(DataStoreEvent.RETRIEVE, handleExportKefedExperiment);
				dataStore.retrieveData(uid);
				exportExperimentButton.enabled = false;
			}
		}

		private function handleExportKefedExperiment(e:DataStoreEvent):void {
			trace("Export template handler", e, " model=", e.experiment);
			CursorManager.removeBusyCursor();
			dataStore.removeEventListener(DataStoreEvent.RETRIEVE, handleExportKefedExperiment);
			dataStore.addEventListener(DataStoreEvent.RETRIEVE, handleLoadKefedExperiment);
			this.experiment = e.experiment;
			newExperimentPopup = PopUpManager.createPopUp(this, NewKefedExperimentDialog, true) as NewKefedExperimentDialog;
			newExperimentPopup.title = "Export this experiment";
			newExperimentPopup.editable = false;
			newExperimentPopup.TypeFieldList.visible = false;
			newExperimentPopup.TypeFieldItem.visible = true;
			newExperimentPopup.TypeField.text = experiment.type;
			newExperimentPopup.Name.text = experiment.modelName;
			newExperimentPopup.Source.text = experiment.source;
			newExperimentPopup.Citation.text = experiment.citeKey;
			newExperimentPopup.Description.text = experiment.description;
			newExperimentPopup.addEventListener(CloseEvent.CLOSE, closeNewExperimentDialog);
			newExperimentPopup.OkButton.addEventListener(MouseEvent.CLICK, exportCurrentExperiment);
			newExperimentPopup.cancelButton.addEventListener(MouseEvent.CLICK, closeNewExperimentDialog);
			mx.managers.PopUpManager.centerPopUp(newExperimentPopup);
		}

		private function exportCurrentExperiment(evt:Event):void {
			mx.managers.PopUpManager.removePopUp(newExperimentPopup);
			exportFileRef = new FileReference();
			exportFileRef.addEventListener(Event.COMPLETE, exportExperimentCompleted);
			exportFileRef.addEventListener(Event.CANCEL, exportExperimentCanceled);
			var defaultFilename:String = experiment.modelName.replace(/ /g, "-") + ".json";
			exportFileRef.save(JSONSerializer.serializeKefedExperiment(experiment, false), defaultFilename);
		}


		private function exportExperimentCompleted(evt:Event):void {
			exportExperimentButton.enabled = true;
			exportFileRef = null; // Release resources
		}

		private function exportExperimentCanceled(evt:Event):void {
			exportExperimentButton.enabled = true;
			exportFileRef = null; // Release resources
		}

		private function importExperiment(e:Event):void {
			importFileRef = new FileReference();
			importFileRef.addEventListener(Event.SELECT, importFileSelected);
			importFileRef.addEventListener(Event.COMPLETE, importExperimentLoadCompleted)
			importFileRef.addEventListener(FaultEvent.FAULT, callError);
			importFileRef.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
			try {
				importFileRef.browse([new FileFilter("JSON Files", "*.json;*.txt")]);
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}
		}

		private function importExperimentLoadCompleted(evt:Event):void {
			// trace("File size = " + fileRef.data.length);
			try {
				var jsonText:String = importFileRef.data.readMultiByte(importFileRef.data.length, "iso-8859-1");
				var e:KefedExperiment = JSONSerializer.deserializeKefedExperiment(jsonText);
				e.updateUID();
				dataStore.removeEventListener(DataStoreEvent.INSERT, handleInsertKefedExperiment);
				dataStore.addEventListener(DataStoreEvent.INSERT, handleInsertImportedExperiment);
				CursorManager.setBusyCursor();
				dataStore.insertData(e);
			} catch (error:Error) {
				Alert.show("Error reading file data: " + error, "ERROR");
			}

			importFileRef = null; // To free data storage.
		}


		private function handleInsertImportedExperiment(evt:Event):void {
			CursorManager.removeBusyCursor();
			dataStore.removeEventListener(DataStoreEvent.INSERT, handleInsertImportedExperiment);
			dataStore.addEventListener(DataStoreEvent.INSERT, handleInsertKefedExperiment);
			this.refresh(evt);
		}

		/**
		 * Miscellaneous
		 */


		private function callError(e:FaultEvent):void {
			cursorManager.removeBusyCursor();
			Alert.show(UiUtil.getFaultURL(e) + "\n" + e.message.toString());
		}

		public function errorHandler(event:Event):void {
			Alert.show("IO Error: " + event, "Error");
		}

		public function returnToDashboard(event:KefedAppEvent):void {
			FlexGlobals.topLevelApplication.currentState = "Dashboard_State";
		}

		private function batchUpload():void {
			if (FlexGlobals.topLevelApplication.eventDispatcher != null) {
				FlexGlobals.topLevelApplication.currentState = "Batch_State";
			}
		}

		private function updateSelectedList():void {

			var l:Array = list.selectedItems;
			FlexGlobals.topLevelApplication.selectedOntologies = l;

			var s:String = FlexGlobals.topLevelApplication.getOntologyList();
			selectedOntologiesLabel.text = s;
		}
		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function ___InventoryComponent_HDividedBox1_preinitialize(event:mx.events.FlexEvent):void
{
	init();
}

/**
 * @private
 **/
public function ___InventoryComponent_HDividedBox1_creationComplete(event:mx.events.FlexEvent):void
{
	refresh()
}

private function _InventoryComponent_ClassFactory1_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxRenderer;
	return temp;
}

/**
 * @private
 **/
public function __list_initialize(event:mx.events.FlexEvent):void
{
	list.dataProvider=ontologyList
}

/**
 * @private
 **/
public function __list_change(event:mx.events.ListEvent):void
{
	updateSelectedList()
}

private function _InventoryComponent_DataGridColumn1_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Design Name";
	temp.dataField = "modelName";
	return temp;
}

private function _InventoryComponent_DataGridColumn2_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Source";
	temp.dataField = "source";
	return temp;
}

private function _InventoryComponent_DataGridColumn3_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Date";
	temp.dataField = "dateTime";
	return temp;
}

/**
 * @private
 **/
public function __templateGrid_doubleClick(event:flash.events.MouseEvent):void
{
	editTemplate();
}

/**
 * @private
 **/
public function __templateGrid_change(event:mx.events.ListEvent):void
{
	handleTemplateChange(event);
}

/**
 * @private
 **/
public function __newDesignButton_click(event:flash.events.MouseEvent):void
{
	newTemplate();
}

/**
 * @private
 **/
public function __copyDesignButton_click(event:flash.events.MouseEvent):void
{
	copyTemplate();
}

/**
 * @private
 **/
public function __editDesignButton_click(event:flash.events.MouseEvent):void
{
	editTemplate();
}

/**
 * @private
 **/
public function __deleteDesignButton_click(event:flash.events.MouseEvent):void
{
	deleteTemplate();
}

/**
 * @private
 **/
public function __importDesignButton_click(event:flash.events.MouseEvent):void
{
	importTemplate(event);
}

/**
 * @private
 **/
public function __exportDesignButton_click(event:flash.events.MouseEvent):void
{
	exportTemplate(event);
}

private function _InventoryComponent_DataGridColumn4_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Experimental Design";
	temp.dataField = "type";
	return temp;
}

private function _InventoryComponent_DataGridColumn5_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Experimental Label";
	temp.dataField = "modelName";
	return temp;
}

private function _InventoryComponent_DataGridColumn6_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Source";
	temp.dataField = "source";
	return temp;
}

private function _InventoryComponent_DataGridColumn7_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.headerText = "Date / Time";
	temp.dataField = "dateTime";
	return temp;
}

/**
 * @private
 **/
public function __experimentGrid_doubleClick(event:flash.events.MouseEvent):void
{
	editExperiment();
}

/**
 * @private
 **/
public function __experimentGrid_change(event:mx.events.ListEvent):void
{
	handleExperimentChange(event);
}

/**
 * @private
 **/
public function __newExperimentButton_click(event:flash.events.MouseEvent):void
{
	newExperiment();
}

/**
 * @private
 **/
public function __copyExperimentButton_click(event:flash.events.MouseEvent):void
{
	copyExperiment();
}

/**
 * @private
 **/
public function __editExperimentButton_click(event:flash.events.MouseEvent):void
{
	editExperiment();
}

/**
 * @private
 **/
public function __deleteExperimentButton_click(event:flash.events.MouseEvent):void
{
	deleteExperiment();
}

/**
 * @private
 **/
public function __importExperimentButton_click(event:flash.events.MouseEvent):void
{
	importExperiment(event);
}

/**
 * @private
 **/
public function __exportExperimentButton_click(event:flash.events.MouseEvent):void
{
	exportExperiment(event);
}


    //  binding mgmt
    private function _InventoryComponent_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            null,
            null,
            "list.dataProvider"
            , "ontologyList");

        result[1] = new mx.binding.Binding(this,
            function():Object
            {

                return (templateList);
            },
            null,
            "templateGrid.dataProvider"
            );

        result[2] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (designCountText);
                return (result == undefined ? null : String(result));
            },
            null,
            "designCount.text"
            );

        result[3] = new mx.binding.Binding(this,
            function():Object
            {

                return (experimentList);
            },
            null,
            "experimentGrid.dataProvider"
            );

        result[4] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (experimentCountText);
                return (result == undefined ? null : String(result));
            },
            null,
            "experimentCount.text"
            );


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (InventoryComponent)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
