
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    edu.isi.bmkeg.kefed.ui
 *  Class:      RelativeRegionEditor
 *  Source:     /Users/Gully/Documents/Projects/2_active/IEDB/work/kefedEditor/src/main/flex/edu/isi/bmkeg/kefed/ui/RelativeRegionEditor.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2017.08.30 16:17:01 PDT
 */

package edu.isi.bmkeg.kefed.ui
{

import edu.isi.bmkeg.kefed.ui.DataGridComboBox;
import edu.isi.bmkeg.kefed.ui.StructuredEditorComponent;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.collections.ArrayCollection;
import mx.containers.HBox;
import mx.controls.Button;
import mx.controls.TextInput;
import mx.controls.TileList;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.styles.*;



//  begin class def
public class RelativeRegionEditor
    extends edu.isi.bmkeg.kefed.ui.StructuredEditorComponent
    implements mx.binding.IBindingClient
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var addRegionButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var addRegions : mx.containers.HBox;

    [Bindable]
	/**
 * @private
 **/
    public var allowedRelations : mx.collections.ArrayCollection;

    [Bindable]
	/**
 * @private
 **/
    public var newRegion : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var regions : mx.controls.TileList;

    [Bindable]
	/**
 * @private
 **/
    public var relation : edu.isi.bmkeg.kefed.ui.DataGridComboBox;


    //  type-import dummies


    //  Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: edu.isi.bmkeg.kefed.ui.StructuredEditorComponent
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: edu.isi.bmkeg.kefed.ui.DataGridComboBox
        ,
        id: "relation"
        ,
        propertiesFactory: function():Object { return {
          editable: false,
          toolTip: "Equivalent means the same area is covered.  Part-of means fully contained in.",
          percentWidth: 100.0
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TileList
        ,
        id: "regions"
        ,
        events: {
          creationComplete: "__regions_creationComplete"
        }
        ,
        propertiesFactory: function():Object { return {
          allowMultipleSelection: true,
          percentWidth: 100.0
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HBox
        ,
        id: "addRegions"
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.TextInput
              ,
              id: "newRegion"
              ,
              events: {
                change: "__newRegion_change"
              }
              ,
              propertiesFactory: function():Object { return {
                text: ""
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              id: "addRegionButton"
              ,
              events: {
                click: "__addRegionButton_click"
              }
              ,
              propertiesFactory: function():Object { return {
                label: "+",
                enabled: false
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function RelativeRegionEditor()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _RelativeRegionEditor_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_edu_isi_bmkeg_kefed_ui_RelativeRegionEditorWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return RelativeRegionEditor[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.percentWidth = 100.0;
        _RelativeRegionEditor_ArrayCollection1_i();


        // events
        this.addEventListener("initialize", ___RelativeRegionEditor_StructuredEditorComponent1_initialize);
        this.addEventListener("creationComplete", ___RelativeRegionEditor_StructuredEditorComponent1_creationComplete);


        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings
        //  initialize component styles
        if (!this.styleDeclaration)
        {
            this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
        }

        this.styleDeclaration.defaultFactory = function():void
        {
            this.borderStyle = "solid";
            this.borderColor = 16776960;
            this.borderVisible = true;
            this.backgroundAlpha = 1;
            this.backgroundColor = 16777215;
        };



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


    //  scripts
    //  <Script>, line 26 - 168

			import mx.events.ListEvent;
			import edu.isi.bmkeg.utils.BindingDebugger;
			import mx.utils.ArrayUtil;
			import mx.utils.StringUtil;
			import mx.managers.LayoutManager;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import flare.util.Colors;
			import mx.controls.listClasses.ListBase;
			import mx.core.UIComponent;
			import mx.collections.ArrayCollection;
			import edu.isi.bmkeg.kefed.ui.UiUtil;
			
			public static var EDITOR_HEIGHT_OFFSET:int = 162; // editorHeightOffset value for use in DataGridColumns.
			public static var EDITOR_WIDTH_OFFSET:int = 100;
			
			[Bindable]
			public var allowedRegions:ArrayCollection;
			[Bindable]
			public var allowOtherRegions:Boolean = false;
			
			// Test.  Trying to figure out how to force the calcuation
			//  of the size.  Failing right now, because the instantiation
			//  is not complete after creating the instance.  Not sure what
			//  needs to be done to force creation.
			public function computeSize():void {
				commitProperties();
				validateDisplayList();
				trace("ComputeSize 0: ",measuredWidth,"x",measuredHeight);
				validateNow();
				trace("ComputeSize 1: ",measuredWidth,"x",measuredHeight);
				measure();
				trace("ComputeSize 2: ",measuredWidth,"x",measuredHeight);
				LayoutManager.getInstance().validateClient(this);
				trace("ComputeSize 3: ",measuredWidth,"x",measuredHeight);
				measure();
				trace("ComputeSize 4: ",measuredWidth,"x",measuredHeight);
			}
			
			public function handleCreationComplete(event:Event):void {
				trace("Creation complete: ",measuredWidth,"x",measuredHeight);
				trace("CC: dataitem.regions = ", dataItem.regions as Array);
				callLater(scrollToSelection,[]);
				BindingDebugger.debugComponent(this, true);
			}
			
			private function scrollToSelection():void {
				trace("Scroll to selection", regions.selectedIndices);
				var indexLength:int = regions.selectedIndices.length;
				if (indexLength > 0) {
					trace("SS: dataitem.regions = ", dataItem.regions as Array);
					trace("SS: regions.selectedIndices = ", regions.selectedIndices);
					trace("SS: Scrolling to ", regions.selectedIndices[indexLength - 1]);
					regions.scrollToIndex(regions.selectedIndices[indexLength - 1]);
//					callLater(regions.scrollToIndex, [regions.selectedIndices[0]]);
				}
			}
			
			public function init():void {
				addEventListener(FlexEvent.DATA_CHANGE, handleDataChanged);
				newRegion.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
			}
			
			public function handleDataChanged(event:Event):void {
				trace("Datachanged.");
			}
			
			private function keyHandler(event:KeyboardEvent):void {
    			if (event.keyCode == Keyboard.ENTER) {
       				addListItem(event);
    		 	}
   			}
   			
   				
			/** React to changes in the input text box.  Use this to 
			 * enable and disable the add button.
			 * 
			 * @param evt The event triggering this change.
			 */
			 private function handleTextChange(evt:Event):void {
			 	var newText:String = StringUtil.trim(newRegion.text);
			 	var hasInput:Boolean = newText.length > 0;
			 	var enableAdd:Boolean = hasInput && !allowedRegions.contains(newText);
			 	addRegionButton.enabled = enableAdd;
			 }
		   			
   			private function scrollToRegion(region:Object):void {
				var index:int = ArrayUtil.getItemIndex(region, dataItem.regions as Array);
				if (index >= 0) regions.scrollToIndex(index);
			}
   			
   			private function addListItem(evt:Event):void {
	    		var newText:String = StringUtil.trim(newRegion.text);
	    		if (newText.length > 0 && !allowedRegions.contains(newText)) {
	    			trace("AL: Adding to dataItem.regions");
		     		(dataItem.regions as Array).push(newText);
		     		trace("AL: Adding to allowedRegions");
		     		allowedRegions.addItem(newText);
		     		trace("AL: After adding to allowedRegions");
// Things to try:
//	    	executeBindings(true)
//   invalidateDisplayList();
//   validateNow();

//		     		var r:Array = (dataItem.regions as Array);
//		     		r.push(newText)
//		     		dataItem.regions = r;
		    		trace("Add Item: About to adjust tile size");
		    		UiUtil.adjustTileSizeForAddedItem(regions, newText);
//		    		callLater(scrollToSelection, [regions, allowedRegions.length - 1]);
		      		addRegionButton.enabled = false; // Try not to add multiple identical strings.
		    		newRegion.text=""; // Clear value to make new input more efficient
//		    		trace("Before validate");
//		    		scrollToSelection();
//		    		invalidateDisplayList();
//		    		validateNow();
//		    		trace("After validate");
//					trace("Before execute bindings");
//					regions.executeBindings();
//					scrollToSelection();
//					trace("After execute bindings");
	    		}
	    	}
	    	
		private function updateDataItemForSelection(event:ListEvent):void {
			// TODO: CHECK THIS!
			dataItem.regions = regions.selectedItems;
		}
	
		override protected function commitProperties():void {
			trace("Commit Properties");
			trace("CP: Selection", regions.selectedIndices);
			super.commitProperties();
		}

//		override protected function measure():void {
//			trace(this.parent.parent);
//			super.measure();
//			trace("Measure called.  w=",measuredWidth, "h=",measuredHeight);
//			ListBase(this.parent.parent).invalidateList();
//		}
		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _RelativeRegionEditor_ArrayCollection1_i() : mx.collections.ArrayCollection
{
	var temp : mx.collections.ArrayCollection = new mx.collections.ArrayCollection();
	temp.source = ["equivalent", "part-of", "overlaps", "non-overlapping"];
	temp.initialized(this, "allowedRelations")
	allowedRelations = temp;
	mx.binding.BindingManager.executeBindings(this, "allowedRelations", allowedRelations);
	return temp;
}

/**
 * @private
 **/
public function ___RelativeRegionEditor_StructuredEditorComponent1_initialize(event:mx.events.FlexEvent):void
{
	init()
}

/**
 * @private
 **/
public function ___RelativeRegionEditor_StructuredEditorComponent1_creationComplete(event:mx.events.FlexEvent):void
{
	handleCreationComplete(event)
}

/**
 * @private
 **/
public function __regions_creationComplete(event:mx.events.FlexEvent):void
{
	UiUtil.adjustTileSizeToFit(regions)
}

/**
 * @private
 **/
public function __newRegion_change(event:flash.events.Event):void
{
	handleTextChange(event)
}

/**
 * @private
 **/
public function __addRegionButton_click(event:flash.events.MouseEvent):void
{
	addListItem(event);
}


    //  binding mgmt
    private function _RelativeRegionEditor_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            function():*
            {

                return relation.value;
            },
            function(_sourceFunctionReturnValue:*):void
            {
                
                dataItem.relation = _sourceFunctionReturnValue;
            },
            "dataItem.relation"
            );

        result[1] = new mx.binding.Binding(this,
            function():*
            {

                return regions.selectedItems;
            },
            function(_sourceFunctionReturnValue:*):void
            {
                
                dataItem.regions = _sourceFunctionReturnValue;
            },
            "dataItem.regions"
            );

        result[2] = new mx.binding.Binding(this,
            null,
            null,
            "relation.dataProvider"
            , "allowedRelations");

        result[3] = new mx.binding.Binding(this,
            function():Object
            {

                return (dataItem.relation);
            },
            null,
            "relation.selectedItem"
            );

        result[4] = new mx.binding.Binding(this,
            null,
            null,
            "regions.dataProvider"
            , "allowedRegions");

        result[5] = new mx.binding.Binding(this,
            function():Array
            {
                var result:* = (dataItem.regions);
                return ((result == null) || (result is Array) || (result is flash.utils.Proxy) ? result : [result]);
            },
            function(_sourceFunctionReturnValue:Array):void
            {
                
                regions.selectedItems = _sourceFunctionReturnValue;
            },
            "regions.selectedItems"
            );

        result[5].twoWayCounterpart = result[1];

        result[1].twoWayCounterpart = result[5];
        result[6] = new mx.binding.Binding(this,
            null,
            null,
            "addRegions.visible"
            , "allowOtherRegions");


        return result;
    }

                    private function _RelativeRegionEditor_bindingExprs():void
    {
        
                        dataItem.relation = relation.value;
                                dataItem.regions = regions.selectedItems;
                                                                                                    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (RelativeRegionEditor)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
