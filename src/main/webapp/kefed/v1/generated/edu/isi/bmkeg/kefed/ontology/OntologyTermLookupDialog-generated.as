
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    edu.isi.bmkeg.kefed.ontology
 *  Class:      OntologyTermLookupDialog
 *  Source:     /Users/Gully/Documents/Projects/2_active/IEDB/work/kefedEditor/src/main/flex/edu/isi/bmkeg/kefed/ontology/OntologyTermLookupDialog.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2017.08.30 16:17:00 PDT
 */

package edu.isi.bmkeg.kefed.ontology
{

import edu.isi.bmkeg.kefed.ontology.OntologyTermLookupDialogInnerClass0;
import edu.isi.bmkeg.kefed.ontology.OntologyTermLookupDialogInnerClass1;
import edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxDataGrid;
import edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxRenderer;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.HBox;
import mx.containers.Panel;
import mx.containers.TitleWindow;
import mx.containers.VBox;
import mx.containers.VDividedBox;
import mx.controls.Button;
import mx.controls.CheckBox;
import mx.controls.Label;
import mx.controls.RadioButton;
import mx.controls.RadioButtonGroup;
import mx.controls.Spacer;
import mx.controls.TextArea;
import mx.controls.TextInput;
import mx.controls.dataGridClasses.DataGridColumn;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.formatters.NumberFormatter;
import mx.styles.*;



//  begin class def
public class OntologyTermLookupDialog
    extends mx.containers.TitleWindow
    implements mx.binding.IBindingClient
{

    //  instance variables
/**
 * @private
 **/
    public var _OntologyTermLookupDialog_RadioButton1 : mx.controls.RadioButton;

/**
 * @private
 **/
    public var _OntologyTermLookupDialog_RadioButton2 : mx.controls.RadioButton;

    [Bindable]
	/**
 * @private
 **/
    public var dg : edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxDataGrid;

    [Bindable]
	/**
 * @private
 **/
    public var elapsedTimeFormatter : mx.formatters.NumberFormatter;

    [Bindable]
	/**
 * @private
 **/
    public var exactControl : mx.controls.RadioButtonGroup;

    [Bindable]
	/**
 * @private
 **/
    public var ontologyListLabel : mx.controls.TextArea;

    [Bindable]
	/**
 * @private
 **/
    public var propControl : mx.controls.CheckBox;

    [Bindable]
	/**
 * @private
 **/
    public var resultsPanel : mx.containers.Panel;

    [Bindable]
	/**
 * @private
 **/
    public var searchButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var searchCount : mx.controls.Label;

    [Bindable]
	/**
 * @private
 **/
    public var searchInput : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var searchTime : mx.controls.Label;

    [Bindable]
	/**
 * @private
 **/
    public var termListLabel : mx.controls.TextArea;


    //  type-import dummies


    //  Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.TitleWindow
  ,
  propertiesFactory: function():Object { return {
    width: 640,
    height: 480,
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.VDividedBox
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Panel
              ,
              propertiesFactory: function():Object { return {
                title: "Search Ontologies",
                percentWidth: 100.0,
                percentHeight: 45.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.VBox
                    ,
                    stylesFactory: function():void {
                      this.paddingLeft = 10;
                      this.paddingBottom = 10;
                      this.paddingRight = 10;
                      this.paddingTop = 10;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.HBox
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0,
                            percentHeight: 100.0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.TextInput
                                ,
                                id: "searchInput"
                                ,
                                propertiesFactory: function():Object { return {
                                  percentWidth: 30.0
                                }}
                              })
                            ,
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.Button
                                ,
                                id: "searchButton"
                                ,
                                events: {
                                  click: "__searchButton_click"
                                }
                                ,
                                propertiesFactory: function():Object { return {
                                  label: "Search"
                                }}
                              })
                            ,
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.RadioButton
                                ,
                                id: "_OntologyTermLookupDialog_RadioButton1"
                                ,
                                propertiesFactory: function():Object { return {
                                  label: "contains",
                                  value: false
                                }}
                              })
                            ,
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.RadioButton
                                ,
                                id: "_OntologyTermLookupDialog_RadioButton2"
                                ,
                                propertiesFactory: function():Object { return {
                                  label: "exact match",
                                  value: true
                                }}
                              })
                            ,
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.CheckBox
                                ,
                                id: "propControl"
                                ,
                                events: {
                                  change: "__propControl_change"
                                }
                                ,
                                propertiesFactory: function():Object { return {
                                  label: "Search Definitions?"
                                }}
                              })
                            ]
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.TextArea
                          ,
                          id: "ontologyListLabel"
                          ,
                          stylesFactory: function():void {
                            this.borderVisible = false;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0
                          }}
                        })
                      ]
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Panel
              ,
              id: "resultsPanel"
              ,
              propertiesFactory: function():Object { return {
                title: "Terminology",
                percentWidth: 100.0,
                percentHeight: 100.0,
                visible: false,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxDataGrid
                    ,
                    id: "dg"
                    ,
                    events: {
                      change: "__dg_change"
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 100.0,
                      editable: false,
                      variableRowHeight: true,
                      wordWrap: true,
                      allowMultipleSelection: true,
                      columns: [_OntologyTermLookupDialog_DataGridColumn1_c(), _OntologyTermLookupDialog_DataGridColumn2_c(), _OntologyTermLookupDialog_DataGridColumn3_c(), _OntologyTermLookupDialog_DataGridColumn4_c(), _OntologyTermLookupDialog_DataGridColumn5_c()]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    stylesFactory: function():void {
                      this.paddingLeft = 10;
                      this.paddingBottom = 10;
                      this.paddingRight = 10;
                      this.paddingTop = 10;
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.containers.HBox
                                ,
                                propertiesFactory: function():Object { return {
                                  percentWidth: 100.0,
                                  childDescriptors: [
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Label
                                      ,
                                      id: "searchCount"
                                      ,
                                      stylesFactory: function():void {
                                        this.color = 0;
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        text: ""
                                      }}
                                    })
                                  ,
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Label
                                      ,
                                      id: "searchTime"
                                      ,
                                      stylesFactory: function():void {
                                        this.color = 8421504;
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        text: ""
                                      }}
                                    })
                                  ,
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Spacer
                                      ,
                                      propertiesFactory: function():Object { return {
                                        percentWidth: 100.0
                                      }}
                                    })
                                  ,
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Button
                                      ,
                                      events: {
                                        click: "___OntologyTermLookupDialog_Button2_click"
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        label: "Set"
                                      }}
                                    })
                                  ,
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Button
                                      ,
                                      events: {
                                        click: "___OntologyTermLookupDialog_Button3_click"
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        label: "Add"
                                      }}
                                    })
                                  ,
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.Button
                                      ,
                                      events: {
                                        click: "___OntologyTermLookupDialog_Button4_click"
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        label: "Cancel"
                                      }}
                                    })
                                  ]
                                }}
                              })
                            ,
                              new mx.core.UIComponentDescriptor({
                                type: mx.controls.TextArea
                                ,
                                id: "termListLabel"
                                ,
                                stylesFactory: function():void {
                                  this.borderVisible = false;
                                }
                                ,
                                propertiesFactory: function():Object { return {
                                  percentWidth: 100.0
                                }}
                              })
                            ]
                          }}
                        })
                      ]
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function OntologyTermLookupDialog()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _OntologyTermLookupDialog_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_edu_isi_bmkeg_kefed_ontology_OntologyTermLookupDialogWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return OntologyTermLookupDialog[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.layout = "absolute";
        this.width = 640;
        this.height = 480;
        this.title = "Ontology Term Lookup";
        this.showCloseButton = true;
        _OntologyTermLookupDialog_NumberFormatter1_i();
        _OntologyTermLookupDialog_RadioButtonGroup1_i();


        // events
        this.addEventListener("initialize", ___OntologyTermLookupDialog_TitleWindow1_initialize);
        this.addEventListener("close", ___OntologyTermLookupDialog_TitleWindow1_close);


        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


    //  scripts
    //  <Script>, line 11 - 254

			import edu.isi.bmkeg.kefed.elements.IKefedNamedObject;
			import edu.isi.bmkeg.kefed.elements.KefedObject;
			import edu.isi.bmkeg.kefed.ontology.OntologySearchEvent;
			import edu.isi.bmkeg.kefed.ontology.OntologySearchInterface;
			import edu.isi.bmkeg.kefed.ontology.OntologyTermReference;
			import edu.isi.bmkeg.kefed.ui.SimpleInputWindow;
			import edu.isi.bmkeg.kefed.ui.UiUtil;
			import edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxRenderer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private static var exactControlDefault:Boolean = false;
			private static var propControlDefault:Boolean = false;
			
			[Bindable]
			public var termLookupService:OntologySearchInterface = null;

			[Bindable]
			private var exact:Boolean = false; 

			[Bindable]
			private var prop:Boolean = false; 

			[Bindable]
			private var kefedObj:IKefedNamedObject;
			
			[Bindable]
			private var currentSearchTerm:String = "";
			
			[Bindable]
			private var currentSearchResults:ArrayCollection = new ArrayCollection();
			
			private var startTime:uint = 0;
			
			
			/** Create and popup a dialog for searching for ontology terms and 
			 *  updating the ontologyIds slot of the subject.  The initial search
			 *  term will be set to the nameValue of the subject.  The dialog
			 *  will handle updating ontologyIds by adding or setting the Ids
			 *  based on the search results and the existing values.
			 * 
			 * @param parent The parent object for the dialog.
			 * @param subject The KefedNamedObject that is being processe
			 * @param lookupService The service to use for term lookup.
			 */
			public static function showDialog(parent:DisplayObject,
											  subject:IKefedNamedObject,
											  lookupService:OntologySearchInterface):void {
				var dialog:OntologyTermLookupDialog = PopUpManager.createPopUp(parent,
		  																	   OntologyTermLookupDialog,
		  																	   true) as OntologyTermLookupDialog;
		  		dialog.kefedObj = subject;
		  		dialog.currentSearchTerm = subject.nameValue;
		  		dialog.termLookupService = lookupService;
		  		dialog.addEventListeners();
		  		dialog.resultsPanel.visible = false;
		  		dialog.exactControl.selectedValue = exactControlDefault;
		  		dialog.propControl.selected = propControlDefault;
				PopUpManager.centerPopUp(dialog);
			}
			
			private function init():void {
				searchInput.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
				ontologyListLabel.text = FlexGlobals.topLevelApplication.getOntologyList();
			}
			
			private function addEventListeners():void {
				termLookupService.addEventListener(OntologySearchEvent.FIND_ONTOLOGY_TERMS, searchResultEventHandler);
				termLookupService.addEventListener(FaultEvent.FAULT, FaultEventHandler);	
			}

			private function removeEventListeners():void {
				termLookupService.removeEventListener(OntologySearchEvent.FIND_ONTOLOGY_TERMS, searchResultEventHandler);
				termLookupService.removeEventListener(FaultEvent.FAULT, FaultEventHandler);
			}
			
			private function keyHandler(event:KeyboardEvent):void {
    			if (event.keyCode == Keyboard.ENTER) {
       				searchButtonClick();
     			}
   			}
			
			private function changeExactControl():void {
				exactControlDefault = Boolean(this.exactControl.selectedValue);
			}
			
			private function changePropControl():void {
				propControlDefault = this.propControl.selected;
			}
			
			private function searchButtonClick():void {
				exact = Boolean(this.exactControl.selectedValue);
				prop = this.propControl.selected;
				currentSearchTerm = searchInput.text;
				searchButton.label = "Searching...";
				searchButton.enabled = false;
				resultsPanel.visible = false;
				searchCount.text = "Searching...";
				searchTime.text = "";
				startTime = getTimer();
				termLookupService.search(currentSearchTerm, exact, prop, kefedObj);
			}		

			private function cancelButton():void {
				termLookupService.cancel()
				removeEventListeners();
				mx.managers.PopUpManager.removePopUp(this);
			}
						
			private function closeWindow(event:CloseEvent):void {
				cancelButton();
	        }
	        
	        private function processData(doAdd:Boolean):void {
	        	var res:ArrayCollection = new ArrayCollection();	    	
	        	for each( var i:Object in dg.selectedItems) {
	        		var item:OntologyTermReference = OntologyTermReference.create(i.ontologyId,
	        																	  i.ontologyDisplayName,
												      	  					      i.termId,
												          					      i.displayName,
												          					      i.shortName,
												          					      i.description);
//					item.termURL = i.url;
					res.addItem(item);
	        	}
	        	if (doAdd) {
	        		addTermOntologyIds(res);
	        	} else {
	        		setTermOntologyIds(res);
	        	}
	        	removeEventListeners();
				mx.managers.PopUpManager.removePopUp(this);
	        }
	        
			/** Set the ontologyIds field to be the results of the search.
		     *   Existing values will be replaced.
		     * 
		     * @param results The search results
		     */
		    private function setTermOntologyIds(results:ArrayCollection):void {
		       	this.kefedObj.ontologyIds = results;
		    }
		    
		    /** Add the results of the search to the the ontologyIds field,
		     *  keeping any existing values.
		     *  Will update any existing matching string values to new items.
		     * 
		     * @param event The event containing the search results.
		     */
		    private function addTermOntologyIds(results:ArrayCollection):void {
		      	for each (var id:Object in results) {
		      		var found:Boolean = false;
		      		var toRemove:Object = null;
		      		// Look for a matching object. 
		      		// If the matching object is a string, set the toRemove variable
		      		// so we can replace it with an OntologyReference object.  This is
		      		// used to update older stored ontology links.
		      		for each (var existingId:Object in kefedObj.ontologyIds) {
		      			if ((id as OntologyTermReference).matches(existingId)) {
		      				found = true;
		      				if (existingId is String) toRemove = existingId;
		      				break;
		      			}
		      		}
		      		if (!found) {
		    			kefedObj.ontologyIds.addItem(id);
		    		} else if (toRemove != null) { // Update string to Ontology Reference
		    		    kefedObj.ontologyIds.removeItemAt(kefedObj.ontologyIds.getItemIndex(toRemove));
		    		    kefedObj.ontologyIds.addItem(id);
		    		}
		    	}
		    }

			private function searchResultEventHandler(event:OntologySearchEvent):void {
			
              	currentSearchResults = event.searchResults;
 	            for each (var j:Object in currentSearchResults) {
    	        	// j.url = "";
    	        	j.selected = isCurrentOntologyItem(j);
        	    }
  				
				// need to make sure that the active terms are selected
				var a:Array = new Array();
				for( var i:int=0; i<currentSearchResults.length; i++) {
					if(currentSearchResults[i].selected) {
						a.push(i);
					}
				}
				dg.selectedIndices = a;
				var stopTime:uint = getTimer();
				var nResults:int = currentSearchResults.length;
				searchCount.text = nResults + " match" + (nResults == 1 ? "" : "es");
				searchTime.text = elapsedTimeFormatter.format((stopTime - startTime) / 1000.0) + "s";
				updateTermListLabel();
				resultsPanel.visible = true;
				searchButton.label = "Search";
				searchButton.enabled = true;
	  		}
	  		
	  		// Check if the search item is currently an ontologyId of
	  		// the kefedObject.
	        // NOTE:  This is currently done by just using the
	        //  termId field, which is not guaranteed unique
	        //  across ontologies.  It should really be the
	        //  combination of the ontology name and term id.
	  		private function isCurrentOntologyItem(item:Object):Boolean {
	  			for each (var i:Object in kefedObj.ontologyIds) {
	            	// Backward compatibility.  Be prepared for just a string.
	            	if (i is OntologyTermReference) {
	            		if (item.termId == i.termId) return true;
	            	} else {
	            		if (item.termId == i) return true;
	            	}
	            }
	            return false;
	  		}
	  		
			private function updateTermListLabel():void {
				var s:String = "";
				for( var i:int=0; i<dg.selectedItems.length; i++) {
					if(i>0)
						s += ", ";
					s += dg.selectedItems[i].shortName; // or termId?
				}
				
				termListLabel.text = s;
			}
	    	
			private function FaultEventHandler(event:FaultEvent):void {
				searchButton.label = "Search";
				searchButton.enabled = true;
				Alert.show(UiUtil.getFaultURL(event) + "\n" + event.message.toString());
			}
			

		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _OntologyTermLookupDialog_NumberFormatter1_i() : mx.formatters.NumberFormatter
{
	var temp : mx.formatters.NumberFormatter = new mx.formatters.NumberFormatter();
	temp.precision = 1;
	elapsedTimeFormatter = temp;
	mx.binding.BindingManager.executeBindings(this, "elapsedTimeFormatter", elapsedTimeFormatter);
	return temp;
}

private function _OntologyTermLookupDialog_RadioButtonGroup1_i() : mx.controls.RadioButtonGroup
{
	var temp : mx.controls.RadioButtonGroup = new mx.controls.RadioButtonGroup();
	temp.addEventListener("change", __exactControl_change);
	temp.initialized(this, "exactControl")
	exactControl = temp;
	mx.binding.BindingManager.executeBindings(this, "exactControl", exactControl);
	return temp;
}

/**
 * @private
 **/
public function __exactControl_change(event:flash.events.Event):void
{
	changeExactControl();
}

/**
 * @private
 **/
public function ___OntologyTermLookupDialog_TitleWindow1_initialize(event:mx.events.FlexEvent):void
{
	init()
}

/**
 * @private
 **/
public function ___OntologyTermLookupDialog_TitleWindow1_close(event:mx.events.CloseEvent):void
{
	closeWindow(event)
}

/**
 * @private
 **/
public function __searchButton_click(event:flash.events.MouseEvent):void
{
	searchButtonClick();
}

/**
 * @private
 **/
public function __propControl_change(event:flash.events.Event):void
{
	changePropControl();
}

private function _OntologyTermLookupDialog_DataGridColumn1_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.dataField = "termId";
	temp.headerText = " ";
	temp.width = 20;
	temp.sortable = true;
	temp.editable = false;
	temp.itemRenderer = _OntologyTermLookupDialog_ClassFactory1_c();
	return temp;
}

private function _OntologyTermLookupDialog_ClassFactory1_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = edu.isi.bmkeg.utils.CheckBoxDataGrid.CheckBoxRenderer;
	return temp;
}

private function _OntologyTermLookupDialog_DataGridColumn2_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.dataField = "htmlDisplayName";
	temp.headerText = "Preferred Name";
	temp.editable = false;
	temp.showDataTips = false;
	temp.itemRenderer = _OntologyTermLookupDialog_ClassFactory2_c();
	return temp;
}

private function _OntologyTermLookupDialog_ClassFactory2_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = edu.isi.bmkeg.kefed.ontology.OntologyTermLookupDialogInnerClass0;
	temp.properties = {outerDocument: this};
	return temp;
}

private function _OntologyTermLookupDialog_DataGridColumn3_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.dataField = "htmlDescription";
	temp.headerText = "Description";
	temp.editable = false;
	temp.showDataTips = false;
	temp.itemRenderer = _OntologyTermLookupDialog_ClassFactory3_c();
	return temp;
}

private function _OntologyTermLookupDialog_ClassFactory3_c() : mx.core.ClassFactory
{
	var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
	temp.generator = edu.isi.bmkeg.kefed.ontology.OntologyTermLookupDialogInnerClass1;
	temp.properties = {outerDocument: this};
	return temp;
}

private function _OntologyTermLookupDialog_DataGridColumn4_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.dataField = "ontologyDisplayName";
	temp.headerText = "Ontology Name";
	temp.editable = false;
	temp.showDataTips = true;
	return temp;
}

private function _OntologyTermLookupDialog_DataGridColumn5_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.dataField = "termId";
	temp.headerText = "Term Id";
	temp.editable = false;
	temp.showDataTips = true;
	return temp;
}

/**
 * @private
 **/
public function __dg_change(event:mx.events.ListEvent):void
{
	updateTermListLabel();
}

/**
 * @private
 **/
public function ___OntologyTermLookupDialog_Button2_click(event:flash.events.MouseEvent):void
{
	processData(false);
}

/**
 * @private
 **/
public function ___OntologyTermLookupDialog_Button3_click(event:flash.events.MouseEvent):void
{
	processData(true);
}

/**
 * @private
 **/
public function ___OntologyTermLookupDialog_Button4_click(event:flash.events.MouseEvent):void
{
	cancelButton();
}


    //  binding mgmt
    private function _OntologyTermLookupDialog_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            function():Object
            {

                return (exact);
            },
            null,
            "exactControl.selectedValue"
            );

        result[1] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (currentSearchTerm);
                return (result == undefined ? null : String(result));
            },
            null,
            "searchInput.text"
            );

        result[2] = new mx.binding.Binding(this,
            null,
            null,
            "_OntologyTermLookupDialog_RadioButton1.group"
            , "exactControl");

        result[3] = new mx.binding.Binding(this,
            null,
            null,
            "_OntologyTermLookupDialog_RadioButton2.group"
            , "exactControl");

        result[4] = new mx.binding.Binding(this,
            function():Object
            {

                return (currentSearchResults);
            },
            null,
            "dg.dataProvider"
            );


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (OntologyTermLookupDialog)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
