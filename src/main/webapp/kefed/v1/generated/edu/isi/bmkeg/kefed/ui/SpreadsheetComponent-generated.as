
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    edu.isi.bmkeg.kefed.ui
 *  Class:      SpreadsheetComponent
 *  Source:     /Users/Gully/Documents/Projects/2_active/IEDB/work/kefedEditor/src/main/flex/edu/isi/bmkeg/kefed/ui/SpreadsheetComponent.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2017.08.30 16:17:01 PDT
 */

package edu.isi.bmkeg.kefed.ui
{

import com.kapit.diagram.view.DiagramView;
import edu.isi.bmkeg.kefed.elements.KefedObject;
import edu.isi.bmkeg.kefed.ontology.OntologySearchInterface;
import edu.isi.bmkeg.kefed.ui.VariableTemplateTabs;
import edu.isi.bmkeg.kefed.ui.kapit.DiagramZoomHSlider;
import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Form;
import mx.containers.FormHeading;
import mx.containers.FormItem;
import mx.containers.HBox;
import mx.containers.HDividedBox;
import mx.containers.Panel;
import mx.containers.VBox;
import mx.containers.VDividedBox;
import mx.controls.Button;
import mx.controls.DataGrid;
import mx.controls.Label;
import mx.controls.List;
import mx.controls.Spacer;
import mx.controls.Text;
import mx.controls.TextArea;
import mx.controls.TextInput;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.states.AddChild;
import mx.states.RemoveChild;
import mx.states.State;
import mx.styles.*;


[States("ConstantSpecification_State", "ParameterSpecification_State", "MeasurementSpecification_State", "Spreadsheet_State")]

//  begin class def
public class SpreadsheetComponent
    extends mx.containers.VBox
    implements mx.binding.IBindingClient
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var CopyLastDataRowButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var CopySelectedDataRowButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var RemoveDataRowButton : mx.controls.Button;

/**
 * @private
 **/
    public var _SpreadsheetComponent_AddChild1 : mx.states.AddChild;

/**
 * @private
 **/
    public var _SpreadsheetComponent_AddChild2 : mx.states.AddChild;

/**
 * @private
 **/
    public var _SpreadsheetComponent_AddChild3 : mx.states.AddChild;

/**
 * @private
 **/
    public var _SpreadsheetComponent_AddChild4 : mx.states.AddChild;

/**
 * @private
 **/
    public var _SpreadsheetComponent_Button12 : mx.controls.Button;

/**
 * @private
 **/
    public var _SpreadsheetComponent_Button13 : mx.controls.Button;

/**
 * @private
 **/
    public var _SpreadsheetComponent_Label1 : mx.controls.Label;

/**
 * @private
 **/
    public var _SpreadsheetComponent_RemoveChild1 : mx.states.RemoveChild;

/**
 * @private
 **/
    public var _SpreadsheetComponent_RemoveChild2 : mx.states.RemoveChild;

/**
 * @private
 **/
    public var _SpreadsheetComponent_RemoveChild3 : mx.states.RemoveChild;

/**
 * @private
 **/
    public var _SpreadsheetComponent_RemoveChild4 : mx.states.RemoveChild;

/**
 * @private
 **/
    public var _SpreadsheetComponent_Text1 : mx.controls.Text;

/**
 * @private
 **/
    public var _SpreadsheetComponent_Text3 : mx.controls.Text;

/**
 * @private
 **/
    public var _SpreadsheetComponent_VariableTemplateTabs1 : edu.isi.bmkeg.kefed.ui.VariableTemplateTabs;

/**
 * @private
 **/
    public var _SpreadsheetComponent_VariableTemplateTabs2 : edu.isi.bmkeg.kefed.ui.VariableTemplateTabs;

    [Bindable]
	/**
 * @private
 **/
    public var activeObjectForm : mx.containers.VBox;

    [Bindable]
	/**
 * @private
 **/
    public var checkDataButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var cntrlVaribleList : mx.containers.Panel;

    [Bindable]
	/**
 * @private
 **/
    public var cntrlVbGrid : mx.controls.List;

    [Bindable]
	/**
 * @private
 **/
    public var createSpreadsheetButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var dataGrid : mx.containers.VBox;

    [Bindable]
	/**
 * @private
 **/
    public var depVaribleList : mx.containers.Panel;

    [Bindable]
	/**
 * @private
 **/
    public var depVbData : mx.controls.DataGrid;

    [Bindable]
	/**
 * @private
 **/
    public var depVbGrid : mx.controls.List;

    [Bindable]
	/**
 * @private
 **/
    public var descriptionField : mx.controls.TextArea;

    [Bindable]
	/**
 * @private
 **/
    public var diagram : com.kapit.diagram.view.DiagramView;

    [Bindable]
	/**
 * @private
 **/
    public var flatPanel : mx.containers.Panel;

    [Bindable]
	/**
 * @private
 **/
    public var indepVaribleList : mx.containers.Panel;

    [Bindable]
	/**
 * @private
 **/
    public var indepVbGrid : mx.controls.List;

    [Bindable]
	/**
 * @private
 **/
    public var loadToGridButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var modelCitation : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var modelInfo : mx.containers.Form;

    [Bindable]
	/**
 * @private
 **/
    public var modelName : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var modelSource : mx.controls.TextInput;

    [Bindable]
	/**
 * @private
 **/
    public var spreadsheet : mx.controls.TextArea;

    [Bindable]
	/**
 * @private
 **/
    public var zoomControl : edu.isi.bmkeg.kefed.ui.kapit.DiagramZoomHSlider;


    //  type-import dummies


    //  Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.VBox
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HDividedBox
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          percentHeight: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Panel
              ,
              id: "flatPanel"
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 40.0,
                percentHeight: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    stylesFactory: function():void {
                      this.verticalAlign = "middle";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      height: 30,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Text
                          ,
                          propertiesFactory: function():Object { return {
                            text: "Zoom: "
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: edu.isi.bmkeg.kefed.ui.kapit.DiagramZoomHSlider
                          ,
                          id: "zoomControl"
                          ,
                          propertiesFactory: function():Object { return {
                            minimum: 0,
                            maximum: 1.7,
                            value: 0.5
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    stylesFactory: function():void {
                      this.verticalAlign = "middle";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: com.kapit.diagram.view.DiagramView
                          ,
                          id: "diagram"
                          ,
                          events: {
                            creationComplete: "__diagram_creationComplete"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0,
                            percentHeight: 100.0
                          }}
                        })
                      ]
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.VBox
              ,
              propertiesFactory: function():Object { return {
                percentHeight: 100.0,
                percentWidth: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Label
                          ,
                          id: "_SpreadsheetComponent_Label1"
                          ,
                          stylesFactory: function():void {
                            this.fontSize = 18;
                          }
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Label
                          ,
                          stylesFactory: function():void {
                            this.fontSize = 12;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            text: "Name:"
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.TextInput
                          ,
                          id: "modelName"
                          ,
                          events: {
                            valueCommit: "__modelName_valueCommit"
                          }
                          ,
                          stylesFactory: function():void {
                            this.fontSize = 12;
                          }
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Spacer
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Label
                          ,
                          stylesFactory: function():void {
                            this.fontSize = 12;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            text: "Source:"
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.TextInput
                          ,
                          id: "modelSource"
                          ,
                          events: {
                            valueCommit: "__modelSource_valueCommit"
                          }
                          ,
                          stylesFactory: function():void {
                            this.fontSize = 12;
                          }
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Label
                          ,
                          stylesFactory: function():void {
                            this.fontSize = 12;
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            text: "Citation Key:"
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.TextInput
                          ,
                          id: "modelCitation"
                          ,
                          events: {
                            valueCommit: "__modelCitation_valueCommit"
                          }
                          ,
                          stylesFactory: function():void {
                            this.fontSize = 12;
                          }
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.HBox
                    ,
                    propertiesFactory: function():Object { return {
                      height: 30,
                      percentWidth: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          events: {
                            click: "___SpreadsheetComponent_Button11_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Show PowerLoom"
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Spacer
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "_SpreadsheetComponent_Button12"
                          ,
                          events: {
                            click: "___SpreadsheetComponent_Button12_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Save Data"
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          id: "_SpreadsheetComponent_Button13"
                          ,
                          events: {
                            click: "___SpreadsheetComponent_Button13_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Save & Return"
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.controls.Button
                          ,
                          events: {
                            click: "___SpreadsheetComponent_Button14_click"
                          }
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Cancel"
                          }}
                        })
                      ]
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.VDividedBox
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      percentHeight: 100.0,
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.HBox
                          ,
                          propertiesFactory: function():Object { return {
                            percentWidth: 100.0,
                            percentHeight: 30.0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.containers.Panel
                                ,
                                id: "cntrlVaribleList"
                                ,
                                propertiesFactory: function():Object { return {
                                  percentWidth: 33.0,
                                  percentHeight: 100.0,
                                  title: "Controlled Variables",
                                  childDescriptors: [
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.List
                                      ,
                                      id: "cntrlVbGrid"
                                      ,
                                      events: {
                                        click: "__cntrlVbGrid_click"
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        labelField: "nameValue",
                                        percentWidth: 100.0,
                                        percentHeight: 100.0,
                                        editable: false
                                      }}
                                    })
                                  ]
                                }}
                              })
                            ,
                              new mx.core.UIComponentDescriptor({
                                type: mx.containers.Panel
                                ,
                                id: "indepVaribleList"
                                ,
                                propertiesFactory: function():Object { return {
                                  percentWidth: 33.0,
                                  percentHeight: 100.0,
                                  title: "Parameters",
                                  childDescriptors: [
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.List
                                      ,
                                      id: "indepVbGrid"
                                      ,
                                      events: {
                                        click: "__indepVbGrid_click"
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        labelField: "nameValue",
                                        percentWidth: 100.0,
                                        percentHeight: 100.0,
                                        editable: false
                                      }}
                                    })
                                  ]
                                }}
                              })
                            ,
                              new mx.core.UIComponentDescriptor({
                                type: mx.containers.Panel
                                ,
                                id: "depVaribleList"
                                ,
                                propertiesFactory: function():Object { return {
                                  percentWidth: 33.0,
                                  percentHeight: 100.0,
                                  title: "Measurements",
                                  childDescriptors: [
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.controls.List
                                      ,
                                      id: "depVbGrid"
                                      ,
                                      events: {
                                        click: "__depVbGrid_click"
                                      }
                                      ,
                                      propertiesFactory: function():Object { return {
                                        labelField: "nameValue",
                                        percentWidth: 100.0,
                                        percentHeight: 100.0,
                                        editable: false
                                      }}
                                    })
                                  ]
                                }}
                              })
                            ]
                          }}
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.VBox
                          ,
                          id: "dataGrid"
                          ,
                          propertiesFactory: function():Object { return {
                            label: "Data",
                            percentWidth: 100.0,
                            percentHeight: 100.0,
                            childDescriptors: [
                              new mx.core.UIComponentDescriptor({
                                type: mx.containers.VBox
                                ,
                                id: "activeObjectForm"
                                ,
                                propertiesFactory: function():Object { return {
                                  label: "CurrentObject",
                                  percentWidth: 100.0,
                                  percentHeight: 20.0,
                                  childDescriptors: [
                                    new mx.core.UIComponentDescriptor({
                                      type: mx.containers.Form
                                      ,
                                      id: "modelInfo"
                                      ,
                                      propertiesFactory: function():Object { return {
                                        label: "Model",
                                        percentHeight: 40.0,
                                        percentWidth: 100.0,
                                        childDescriptors: [
                                          new mx.core.UIComponentDescriptor({
                                            type: mx.containers.FormHeading
                                            ,
                                            propertiesFactory: function():Object { return {
                                              label: "Experiment Info"
                                            }}
                                          })
                                        ,
                                          new mx.core.UIComponentDescriptor({
                                            type: mx.containers.FormItem
                                            ,
                                            propertiesFactory: function():Object { return {
                                              label: "Description",
                                              direction: "horizontal",
                                              percentWidth: 100.0,
                                              childDescriptors: [
                                                new mx.core.UIComponentDescriptor({
                                                  type: mx.controls.TextArea
                                                  ,
                                                  id: "descriptionField"
                                                  ,
                                                  events: {
                                                    valueCommit: "__descriptionField_valueCommit"
                                                  }
                                                  ,
                                                  propertiesFactory: function():Object { return {
                                                    height: 120,
                                                    percentWidth: 100.0
                                                  }}
                                                })
                                              ]
                                            }}
                                          })
                                        ,
                                          new mx.core.UIComponentDescriptor({
                                            type: mx.containers.FormItem
                                            ,
                                            propertiesFactory: function():Object { return {
                                              label: "Date/Time",
                                              direction: "horizontal",
                                              percentWidth: 100.0,
                                              childDescriptors: [
                                                new mx.core.UIComponentDescriptor({
                                                  type: mx.controls.Text
                                                  ,
                                                  id: "_SpreadsheetComponent_Text3"
                                                  ,
                                                  propertiesFactory: function():Object { return {
                                                    percentWidth: 100.0
                                                  }}
                                                })
                                              ]
                                            }}
                                          })
                                        ]
                                      }}
                                    })
                                  ]
                                }}
                              })
                            ]
                          }}
                        })
                      ]
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function SpreadsheetComponent()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _SpreadsheetComponent_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_edu_isi_bmkeg_kefed_ui_SpreadsheetComponentWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return SpreadsheetComponent[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.states = [_SpreadsheetComponent_State1_c(), _SpreadsheetComponent_State2_c(), _SpreadsheetComponent_State3_c(), _SpreadsheetComponent_State4_c()];


        // events
        this.addEventListener("preinitialize", ___SpreadsheetComponent_VBox1_preinitialize);


        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings


        // ambient styles
        mx_internal::_SpreadsheetComponent_StylesInit();

                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


    //  scripts
    //  <Script>, line 42 - 943

		import com.kapit.diagram.DiagramEvent;
		import com.kapit.diagram.layouts.utils.Constants;
		import com.kapit.diagram.library.SVGAssetLibrary;
		import com.kapit.diagram.model.DiagramModel;
		import com.kapit.diagram.proxies.DiagramProxy;
		import com.kapit.diagram.proxies.KDLProxy;
		import com.kapit.diagram.ui.Utils;
		import com.kapit.diagram.view.DiagramObject;
		import com.kapit.diagram.view.DiagramSprite;
		import com.kapit.diagram.view.DiagramView;
		
		import edu.isi.bmkeg.kefed.app.KefedAppEvent;
		import edu.isi.bmkeg.kefed.elements.KefedBaseValueTemplate;
		import edu.isi.bmkeg.kefed.elements.KefedExperiment;
		import edu.isi.bmkeg.kefed.elements.KefedFieldTemplate;
		import edu.isi.bmkeg.kefed.elements.KefedFullValueTemplate;
		import edu.isi.bmkeg.kefed.elements.KefedModel;
		import edu.isi.bmkeg.kefed.elements.KefedObject;
		import edu.isi.bmkeg.kefed.elements.KefedPersevereEvent;
		import edu.isi.bmkeg.kefed.elements.KefedPersevereInterface;
		import edu.isi.bmkeg.kefed.ontology.OntologySearchInterface;
		import edu.isi.bmkeg.kefed.ui.ComplexDataGridColumn;
		import edu.isi.bmkeg.kefed.ui.DataEntryCheckBoxFactory;
		import edu.isi.bmkeg.kefed.ui.DataEntryComboFactory;
		import edu.isi.bmkeg.kefed.ui.DataEntryEditorFactory;
		import edu.isi.bmkeg.kefed.ui.DataEntryLongEditorFactory;
		import edu.isi.bmkeg.kefed.ui.DataEntryRelativeRegionFactory;
		import edu.isi.bmkeg.kefed.ui.DataEntryUnitsFactory;
		import edu.isi.bmkeg.kefed.ui.DataGridComboBox;
		import edu.isi.bmkeg.kefed.ui.TextDisplayDialog;
		import edu.isi.bmkeg.kefed.ui.UiUtil;
		import edu.isi.bmkeg.kefed.ui.kapit.DiagramMappings;
		import edu.isi.bmkeg.kefed.ui.kapit.KefedLinkProxy;
		import edu.isi.bmkeg.kefed.ui.kapit.KefedObjectProxy;
		import edu.isi.bmkeg.utils.DataUtil;
		import edu.isi.bmkeg.utils.powerloom.PLExporter;
		
		import flare.vis.events.SelectionEvent;
		
		import flash.events.MouseEvent;
		import flash.net.FileReference;
		import flash.utils.ByteArray;
		
		import mx.charts.HitData;
		import mx.charts.chartClasses.DataTip;
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.controls.TextInput;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.controls.sliderClasses.Slider;
		import mx.core.Application;
		import mx.core.FlexGlobals;
		import mx.core.ScrollPolicy;
		import mx.events.DataGridEvent;
		import mx.events.ListEvent;
		import mx.events.SliderEvent;
		import mx.managers.PopUpManager;
		import mx.rpc.events.FaultEvent;
		import mx.utils.ArrayUtil;
		import mx.utils.ObjectUtil;
		import mx.utils.StringUtil;
	
		[Bindable]
		protected var dataTable:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var dataColumns:Array = null;
		
		[Bindable]
		protected var variableType:KefedFullValueTemplate = null;
	
		[Bindable]
		protected var activeVb:KefedObject;
		
		/** Ontology search interface to be used for term lookup.
	 	 *  Required for proper finding of ontology terms.
	 	 */
		[Bindable]
		public var termLookupService:OntologySearchInterface;

	
		[Bindable]
		protected var model:KefedExperiment = new KefedExperiment();

		[Bindable]
		protected var depVbs:ArrayCollection = new ArrayCollection();

		[Bindable]
		protected var indepVbs:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		protected var cntrlVbs:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		public var saveAllowed:Boolean = true;
		
	    private var _proxy:DiagramProxy;
	    
	    /** File references used for saving and loading spreadsheets.
	    *   Needs to be a field so that the scope is maintained
	    *   across multiple method calls.  Just extracting the
	    *   value from the Event's target fails.
	    */
	    private var saveFileRef:FileReference = null;
	    private var loadFileRef:FileReference = null;

		public function initDiagram():void {
            _proxy = new KDLProxy(diagram);
            diagram.multipanel=false;
            diagram.selectionenabled=true;
            diagram.keyboardenabled=false;
            diagram.dragenabled=false;
            diagram.dropenabled=false;
            var sprites:Array = [];
	
			var diagModel:DiagramModel = new DiagramModel(DiagramMappings.getDiagramMappings());
			
			diagram.model = diagModel;

			if( diagram != null && _proxy != null) {

				diagram.addEventListener(DiagramEvent.SELECTION_CHANGED,
							handleDiagramSelectionChanged);
	
	            _proxy.importGraph();
	            _proxy.exportGraph(Constants.RADIAL_LAYOUT);
	
            }    

			this.loadModel(this.model);

        }
        
		public function loadModel(model:KefedExperiment):void {
        	
            this.model = model;
			this.depVbs = DataUtil.sortCollectionAlphabetically(model.getMeasurements(), "nameValue", false);
			this.indepVbs = DataUtil.sortCollectionAlphabetically(model.getParameters(), "nameValue", false);
			this.cntrlVbs = DataUtil.sortCollectionAlphabetically(model.getConstants(), "nameValue", false);
			
			// Hack: loading the model the 2nd time triggers the 
			// editing updates when you load the diagram from XML
			// Having this temporary model that gets edited by 
			// the update and then discarded fixes the problem
			var tempModel:KefedModel = new KefedModel();
			KefedObjectProxy._graph = tempModel;
			KefedLinkProxy._graph = tempModel;
			
			if( diagram != null && _proxy != null) {

				this.diagram.fromXML(model.diagramXML);
				_proxy.importGraph()
	            
	            zoomControl.setZoom(0.5);
           }    
			
			KefedObjectProxy._graph = model;
			KefedLinkProxy._graph = model;
			
			diagram.deselectAll();			
        }
       
       
  
	/* Generate the PowerLoom string for the data in this model and 
	   show it in a dialog box. */	
	public function showModelPowerLoom(event:MouseEvent):void {
			var d:TextDisplayDialog = new TextDisplayDialog();
			d.title="PowerLoom Representation";
			d.displayText=PLExporter.generateExperimentDataAssertion(model, true);
			PopUpManager.addPopUp(d, this);
		}
		
		public function saveCurrentModel(event:MouseEvent, exit:Boolean):void {
	        var diagramXml:XML = diagram.toXML();
			model.diagramXML = diagramXml;
			model.modelName = modelName.text;
			model.source = modelSource.text;
			model.citeKey = modelCitation.text;
			if(FlexGlobals.topLevelApplication.eventDispatcher != null ) {
				FlexGlobals.topLevelApplication.eventDispatcher.
						dispatchBioScholarEvent(KefedAppEvent.SAVE_DATA_EDIT, model);
			}
			if (exit) {
				currentState = "";
				FlexGlobals.topLevelApplication.currentState = "Dashboard_State";
			}
		}

		public function cancelSave(event:MouseEvent):void {
			if(FlexGlobals.topLevelApplication.eventDispatcher != null ) {
				FlexGlobals.topLevelApplication.eventDispatcher.
						dispatchBioScholarEvent(KefedAppEvent.CANCEL_DATA_EDIT);
				currentState = "";
				FlexGlobals.topLevelApplication.currentState = "Dashboard_State";
			}
		}
		
		private function selectConstant (variable:KefedObject):void {
			activeVb = variable;
			currentState = "ConstantSpecification_State";
			variableType = activeVb.valueType;
		}
		
		private function selectParameter(variable:KefedObject):void {
			activeVb = variable;
			currentState = "ParameterSpecification_State";
			variableType = activeVb.valueType;
		}
		
		private function selectMeasurement(variable:KefedObject):void {
			activeVb = variable;
			currentState = "MeasurementSpecification_State";
			buildMeasurementVariableDataGrid(activeVb, depVbData);
			if (model.experimentData[activeVb.uid] == null) {
				model.experimentData[activeVb.uid] = new ArrayCollection();
			}
			dataTable = model.experimentData[activeVb.uid]; 
		}

		/** Lookup the element UID for the list, and if found, then select the 
		 *  element in the grid and go to the new state and return true.
		 *  If an element with uid is not in the elementList, then
		 *  do nothing and return false.
		 * 
		 * @param uid The UID to lookup in the elementList
		 * @param elementList List of elements to check
		 * @param grid DataGrid that displays the elements from elementList
		 * @param newState The state to enter if the element is found.
		 * @returns true if the element is found, otherwise false.
		 */
		private function lookupElementInList(uid:String,
		  									 elementList:ArrayCollection,
		  									 grid:List,
		  									 newState:String):Boolean {
			for(var i:int=0;i<elementList.length;i++) {
				if (elementList[i].uid == uid) {         
					grid.selectedIndex = i;
		 			selectElementInGrid(grid, elementList, newState);
					return true;	
				}
			}
			return false;			
		}
		
		/** Handle selection changes from the diagram.  This is the main
		 *  selection change handling routine.  Selection changes from the
		 *  lists of variables will indirectly call this by arranging to 
		 *  change the diagram selection when the list selection changes.
		 * 
		 *  That will trigger this routine to be called by the diagram code.
		 */
		private function handleDiagramSelectionChanged(e:Event):void
		{
			var arr:Array=diagram.getSelectedObjects();
			
			var uid:String = null;
			var type:String = null;
			var dObj:DiagramObject = null;
			if( arr && arr.length == 1 ) { 
				dObj = DiagramObject(arr[0]);
				uid = dObj.dataobjectid;
			}
			
			if(uid) {
				// Rather inefficient code that goes through each of the
				// variable arrays and tries to find out what type of
				// variable has been selected.  It then updates the selection
				// for the data part of the interface.
				if (lookupElementInList(uid, depVbs, depVbGrid, "MeasurementSpecification_State")) return;
				if (lookupElementInList(uid, indepVbs, indepVbGrid, "ParameterSpecification_State")) return;
				if (lookupElementInList(uid, cntrlVbs, cntrlVbGrid, "ConstantSpecification_State")) return;
			} 

			// If we got here, then no variable object was selected.
			// So we reset the lists to not have anything selected and then 
			// reset the state to the default state.
			indepVbGrid.selectedIndex = -1;
			cntrlVbGrid.selectedIndex = -1;			            
			depVbGrid.selectedIndex = -1;
			currentState = "";
		}
		
		protected function preinit() : void {
			if(FlexGlobals.topLevelApplication.eventDispatcher != null ) {
				FlexGlobals.topLevelApplication.eventDispatcher.
							addEventListener(KefedAppEvent.EDIT_DATA, loadModelEventListener);
			}
		}
		
		public function loadModelEventListener(event:KefedAppEvent):void {
			this.loadModel(event.activeModel as KefedExperiment);
		}
		
		private function selectDiagramElement(element:KefedObject):void {
            diagram.deselectAll();
            if (element) {
         		var uid:String = element.uid;
           		var dob:DiagramObject = DiagramObject(diagram.getElementByDataObjectId(uid));
	            diagram.selectObject(dob);
	        }
		}
		
		private function deselectNonMatchingList (current:List, target:List):void {
			if (current != target) target.selectedIndex = -1;
		}
		
		
		/** Handle the selection of an element in a grid.  This function takes
		 *  care of updating the other variable grids by deselecting any selections,
		 *  and it sets up the editing for either type editing (Control and Parameters)
		 *  or data editing (Measurements).
		 * 
		 *  Sets "activeVb" to be the currently selected variable, or null if there
		 *  is no selected variable.
		 *
		 * @param grid The selection grid that is being handled.
		 * @param variables Collection of the variables associated with the grid.
		 * @param newState The new editing state to enter if a variable is selected.
		 */
		 private function selectElementInGrid(grid:List,
											  variables:ArrayCollection,
											  newState:String):void {
			deselectNonMatchingList(grid, depVbGrid);
			deselectNonMatchingList(grid, indepVbGrid);
			deselectNonMatchingList(grid, cntrlVbGrid);
			
			if (grid.selectedIndex >= 0) {          
				activeVb = variables[grid.selectedIndex];
				if (activeVb.isMeasurement()) {
					buildMeasurementVariableDataGrid(activeVb, depVbData);
					if (model.experimentData[activeVb.uid] == null) {
						model.experimentData[activeVb.uid] = new ArrayCollection();
					}
					dataTable = model.experimentData[activeVb.uid];
				} else {
					variableType = activeVb.valueType;
				}
				currentState = newState;
			} else {
				activeVb = null;
				diagram.deselectAll();
				currentState = "";
			}
		}
		
		private function selectListElement(event:Event):void {
			var list:List = event.currentTarget as List;
			selectDiagramElement(list.selectedItem as KefedObject);
		}
		
		/** Builds the data grid for a measurement variable.
		 */		
		private function buildMeasurementVariableDataGrid(depV:KefedObject, depVbData:DataGrid):void {
            	
            if( !depV.isMeasurement() ) {
            	return;
            }	
            	
        	//
        	// Go back through graph and build pathways from all independent 
        	// variables and the current dependent variable.
        	// 
        	// TODO: Should this also pick up controlled variables and show
        	//       them in context?
         	var dependOnsArray:ArrayCollection = model.getDependOnsForMeasurement(depV);
 			var cols:Array = new Array();
			
			// Make array for independent variables
        	for(var i:int=0; i<dependOnsArray.length; i++) {
        		createVariableDataRenderer(dependOnsArray[i] as KefedObject, cols);
        	}
 
        	// Now handle the Dependent variable structure as well.
        	createVariableDataRenderer(depV, cols);
 			
			dataColumns = cols;
        }
        
        /** Create a variable data renderer of the appropriate type and
        *   stores it into the column array.
        * 
        * @param variable The variable object
        * @param renderers Array for holding the data renderers.
        */
        private function createVariableDataRenderer(variable:KefedObject, renderers:Array):void {
        	var dgc:DataGridColumn;
        	
           	if (variable.valueType.valueTypeName == "Table") {
        		for each (var field:KefedFieldTemplate in variable.valueType.multipleSlotFields) {
        			dgc = new ComplexDataGridColumn();
        			// Hack:  Include a space after the "." to allow the headerline
        			//        to word wrap at that position.
        			dgc.headerText = variable.nameValue + ". " + field.nameValue;
        			dgc.dataField = variable.uid + "." + field.uid;
        			dgc.headerWordWrap = true;
        			dgc.showDataTips = true;
					setupItemRendererForType(dgc, field.valueType);
					renderers.push(dgc);
        		}
        	} else {
        		dgc = new ComplexDataGridColumn();
        		dgc.headerText = variable.nameValue;
        		dgc.dataField = variable.uid;
       			dgc.showDataTips = true;
        		dgc.headerWordWrap = true;
				setupItemRendererForType(dgc, variable.valueType);
				renderers.push(dgc);	
        	}
        }
        
        /** Decides which data renderer is most appropriate for the type and
        *   template information that is stored for this item.  Then sets the
        *   DataGridColumn appropriately for handling that data renderer.
        * 
        * @param dgc The datagrid column to setup for the item
        * @param vTemplate The base value template for the item
         */
        private function setupItemRendererForType (dgc:DataGridColumn, vTemplate:KefedBaseValueTemplate):void {
        	if (vTemplate.valueTypeName == "True/False") {
				dgc.itemRenderer = new DataEntryCheckBoxFactory(vTemplate);
				dgc.editorDataField = "selected";
				dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "Image"
        				|| vTemplate.valueTypeName == "File") {
        		dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
        		dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "Date") {
				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
				dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "Time") {
				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
				dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "DateTime") {
				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
				dgc.rendererIsEditor = true;
        	} else if (vTemplate.valueTypeName == "Decimal with units") {
        		dgc.labelFunction = unitsLabelFunction;
        		dgc.itemEditor = new DataEntryUnitsFactory(vTemplate);
				dgc.editorDataField = "dataItem";
        		dgc.rendererIsEditor = false;
        		dgc.showDataTips = true;
        		dgc.dataTipFunction = unitsDataTipFunction;
			} else if (vTemplate.valueTypeName == "Region") {
				dgc.labelFunction = regionLabelFunction;
        		dgc.itemEditor = new DataEntryRelativeRegionFactory(vTemplate);
//        		var t:RelativeRegionEditor = dgc.itemEditor.newInstance() as RelativeRegionEditor;
//        		t.computeSize();
//        		trace("Editor=",t," h=",t.measuredHeight," w=",t.measuredWidth);
				dgc.editorDataField = "dataItem";
				dgc.editorHeightOffset = RelativeRegionEditor.EDITOR_HEIGHT_OFFSET;
				dgc.editorWidthOffset = RelativeRegionEditor.EDITOR_WIDTH_OFFSET;
        		dgc.rendererIsEditor = false;
        		dgc.dataTipFunction = regionDataTipFunction;
  			} else if (vTemplate.valueTypeName == "Text"
  						|| vTemplate.valueTypeName == "Decimal"
  						|| vTemplate.valueTypeName == "Integer") {
//  				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
//				dgc.rendererIsEditor = true;
				dgc.itemEditor = new DataEntryEditorFactory(vTemplate);
				dgc.dataTipFunction = simpleDataTipFunction;
			} else if (vTemplate.valueTypeName == "Long Text") {
//				dgc.itemRenderer = new DataEntryLongEditorFactory(vTemplate);
//				dgc.rendererIsEditor = true;
				dgc.editorHeightOffset = RelativeRegionEditor.EDITOR_HEIGHT_OFFSET;
				dgc.editorWidthOffset = RelativeRegionEditor.EDITOR_WIDTH_OFFSET;
				dgc.itemEditor = new DataEntryLongEditorFactory(vTemplate);
				dgc.dataTipFunction = simpleDataTipFunction;
			} else if (vTemplate.allowedValues.length > 0) {
//				dgc.itemRenderer = new DataEntryComboFactory(vTemplate);
//				dgc.rendererIsEditor = true;
				dgc.itemEditor = new DataEntryComboFactory(vTemplate);
				dgc.dataTipFunction = simpleDataTipFunction;
			} else {
//				dgc.itemRenderer = new DataEntryEditorFactory(vTemplate);
//				dgc.rendererIsEditor = true;
				dgc.itemEditor = new DataEntryEditorFactory(vTemplate);
				dgc.dataTipFunction = simpleDataTipFunction;
			}
        }
        
        private function formatUnits(unitsObject:Object):String {
        	if (unitsObject) {
        		if (unitsObject.value) {
        			if (unitsObject.units) {
        				return unitsObject.value + " " + unitsObject.units;
        			} else { // Value but no units
        				return unitsObject.value;
        			}
        		} else if (unitsObject.units) { // units but no value
        			return unitsObject.units;
        		} else {
        			return "";
        		}
        	} else {
        		return "";
        	}
        }
        
        private function unitsLabelFunction(item:Object, col:DataGridColumn):String {
        	return formatUnits(DataUtil.getNestedValue(item, col.dataField));
        }
        
        private function formatRegion(regionObject:Object):String {
        	if (regionObject) {
        		return regionObject.relation + " " + (regionObject.regions as Array).join(",");
	        } else {
	        	return "";
	        }
        }
        
        private function regionLabelFunction(item:Object, col:DataGridColumn):String {
        	return formatRegion(DataUtil.getNestedValue(item, col.dataField));
         }
        
        private function regionDataTipFunction(data:Object):String {
        	return (data) ? formatRegion(data) : "";
        }
        
        private function unitsDataTipFunction(data:Object):String {
        	return (data) ? data.value + " " + data.units : "";
        }
        
        private function simpleDataTipFunction(data:Object):String {
        	return (data) ? data.toString() : "";
        }
		
		/** Constructs a tab-delimited "spreadsheet" structure and returns it
		 *  along with any data that is already entered for the variables.
		 * 	The structure will be determined as follows:
		 * 	Row 1: The UIDs of the variable or variable.field
		 *  Row 2: The name of the variable for variable: field
		 * 	Row 3+: Data values
		 *  For values with units or region values, there will be additional
		 * 	  subfields for "value" and "units" or "relation" "region-list"
		 *  Region subfields can have multiple values separated by ";"
		 * 
		 * @param measurementVar The measurement variable for this spreadsheet.
		 * @returns A string with the spreadsheet format.
		 */
	    public function buildMeasurementVariableSpreadsheetString(measurementVar:KefedObject):String {
			var ss:String = "";
	        if( measurementVar == null || !measurementVar.isMeasurement() ) {
	        	return ss;
	        }
	        
	        var ssheet:ArrayCollection = buildMeasurementVariableInputArray(measurementVar, true);
	        for each (var row:Object in ssheet) {
	        	ss += (row as ArrayCollection).source.join("\t") + "\n";
	        }
	        return ss;
	    }
	    
	    /** Builds a spreadsheet array
	     * 	The structure will be determined as follows:
		 * 	Row 1: The UIDs of the variable or variable.field
		 *  Row 2: The name of the variable for variable: field
		 * 	Row 3+: Data values
		 *  For values with units or region values, there will be additional
		 * 	  subfields for "value" and "units" or "relation" "region-list"
		 *  Region subfields can have multiple values separated by ";"
		 * 
		 * @param measurementVar the measuremnt for which to construct a spreadsheet
		 * @param includeData flag to control inclusion of data in array
		 * @return An ArrayCollection of rows, each row being an array of columns
		 */
	    public function buildMeasurementVariableInputArray(measurementVar:KefedObject,
	    												   includeData:Boolean):ArrayCollection {
	    	var table:ArrayCollection = new ArrayCollection();

			// TODO:  Should this also display the controlled variable values?
			var dependOns:ArrayCollection = this.model.getDependOnsForMeasurement(measurementVar);
	
			// First row sets the variable uids
			// Second row sets the human readable names
			// TODO: Need to set the autoCompletionOptions.
		    var row1:ArrayCollection = new ArrayCollection();
			var row2:ArrayCollection = new ArrayCollection();			
			for each ( var variable:KefedObject in dependOns) {
				addHeaderRowElement(variable, "uid", ".", row1);
				addHeaderRowElement(variable, "nameValue", ": ", row2);				
			}
			addHeaderRowElement(measurementVar, "uid", ".", row1);
			addHeaderRowElement(measurementVar, "nameValue", ": ", row2);
			table.addItem(row1);
		    table.addItem(row2);
		    
		    if (includeData) {
				for each (var dataRow:Object in model.experimentData[measurementVar.uid]) {
					var rowN:ArrayCollection = new ArrayCollection();
					for each (variable in dependOns) {
						addDataRowElement(variable, dataRow[variable.uid], rowN);			
					}
					addDataRowElement(measurementVar, dataRow[measurementVar.uid], rowN);
					table.addItem(rowN);
				}
		    }
			return table;
	    }
	    
	    /** Add a header row element for the variable, using the slotName
	     *  and delimiter to construct the string to return for each element.
	     * 
	     * @param variable The particular variable that the element is added for.
	     * @param slotName The slotName to use to get the value for the header.
	     * @param delimiter The delimiter to use to separate hiearchical elements.
	     * @param row The ArrayCollection that will be modified.
	     */
	    private function addHeaderRowElement(variable:KefedObject,
	    									 slotName:String,
	    									 delimiter:String,
	    									 row:ArrayCollection):void {
	    	var datatype:KefedFullValueTemplate = variable.valueType;
	    	var datatypeName:String = datatype.valueTypeName;
			if (datatypeName == "Table") {
				for each (var field:KefedFieldTemplate in datatype.multipleSlotFields) {
					addHeaderElement(variable[slotName] + delimiter + field[slotName], delimiter, field.valueType, row);
				}
			} else {
				addHeaderElement(variable[slotName], delimiter, datatype, row);
			}
		}
		
		private function addHeaderElement(prefix:String,
										  delimiter:String,
										  datatype:KefedBaseValueTemplate,
										  row:ArrayCollection):void {
			if (datatype.valueTypeName == "Region") {
				row.addItem(prefix + delimiter + "relation");
				row.addItem(prefix + delimiter + "regions");
			} else if (datatype.valueTypeName == "Decimal with units") {
				row.addItem(prefix + delimiter + "value");
				row.addItem(prefix + delimiter + "units");
			} else {
				row.addItem(prefix);
			}
		}
		
 	    
	    /** Add a data row element for the variable, using the data from
	     *  a particular row in the stored data.
	     * 
	     * @param variable The particular variable that the element is added for.
	     * @param datum The object with the values for this object.
	     * @param row The ArrayCollection that will be modified.
	     */
	    private function addDataRowElement(variable:KefedObject,
	    								   datum:Object,
	    								   row:ArrayCollection):void {
			if (variable.valueType.valueTypeName == "Table") {
				for each (var field:KefedFieldTemplate in variable.valueType.multipleSlotFields) {
					var fieldValue:Object = (datum == null) ? "" : datum[field.uid];
					addDataElement(fieldValue, field.valueType, row);
				}
			} else {
				addDataElement(datum, variable.valueType, row);
			}
		}
		
		private function addDataElement(value:Object,
										datatype:KefedBaseValueTemplate,
										row:ArrayCollection):void {
			if (datatype.valueTypeName == "Region") {
				row.addItem((value == null) ? "" : value.relation.toString());
				row.addItem((value == null) ? "" : (value.regions as Array).join(";"));
			} else if (datatype.valueTypeName == "Decimal with units") {
				row.addItem((value == null) ? "" : value.value.toString());
				row.addItem((value == null) ? "" : value.units.toString());
			} else {
				row.addItem((value == null) ? "" : value.toString());
			}
		}

 
        private function handleAddRowEditDependentVariableData():void {   	
            var ac:ArrayCollection = ArrayCollection(depVbData.dataProvider);
            var o:Object = model.buildDependentVariableDataObject(activeVb, null);
            ac.addItem(o);
			depVbData.selectedIndex = ac.length - 1;
            }
        
        private function handleCopySelectedRowEditDependentVariableData():void {
        	var ac:ArrayCollection = ArrayCollection(depVbData.dataProvider);
            var o:Object = model.buildDependentVariableDataObject(activeVb, depVbData.selectedItem);
        	ac.addItem(o);
 			depVbData.selectedIndex = ac.length - 1;
        }
        
        private function handleCopyLastRowEditDependentVariableData():void {
        	var ac:ArrayCollection = ArrayCollection(depVbData.dataProvider);
            var o:Object = model.buildDependentVariableDataObject(activeVb, ac.getItemAt(ac.length - 1));
        	ac.addItem(o);
 			depVbData.selectedIndex = ac.length - 1;
        }

        private function handleRemoveRowEditDependentVariableData():void {
			var dg:DataGrid = DataGrid(this.depVbData);
			var ac:ArrayCollection = ArrayCollection(dg.dataProvider);
            var i:int = dg.selectedIndex;
            if( i == -1 ) {
            	i = ac.length - 1;
            }
            ac.removeItemAt(i);
        }

         private function switchToSpreadsheet(): void {
        	if (this.activeVb.isMeasurement()) {
 	        	currentState = "Spreadsheet_State";
        		this.spreadsheet.text = buildMeasurementVariableSpreadsheetString(activeVb);
        		this.checkDataButton.enabled = false;
        		this.loadToGridButton.enabled = false;
	        }	
        }
        
        private function switchFromSpreadsheet(): void {
        	if( this.activeVb.isMeasurement()) {
        		selectMeasurement(activeVb);
			} else if( this.activeVb.isParameter()) { 	
	        	selectParameter(activeVb);
			} else if( this.activeVb.isConstant()) { 	
				selectConstant(activeVb);
  			} else {
   				currentState = '';
   			}
        }

		private function getSpreadsheetErrorStrings(): String {
			var error:String = "";
        	var ss:String = this.spreadsheet.text;
        	var re:RegExp = /[\n\r]+/;
        	var lines:Array = ss.split(re);
      	if (lines.length < 2) {
        		return "Not enough rows.  Must have two header rows\nRow 1 with IDs and Row 2 with names.\n";
        	}
        	var uids:Array = lines[0].split("\t");
	       	var names:Array = lines[1].split("\t");
        	
        	// Get array of headers to check the table structure.
        	var ssHeaders:ArrayCollection = buildMeasurementVariableInputArray(this.activeVb, false);
        	var uidBase:ArrayCollection = ssHeaders[0] as ArrayCollection;
        	var ssWidth:int = uidBase.length;
 
         	// Check to make sure that the variable names are correct.
        	if (uids.length != ssWidth) {
        		error += "ID row is too " + ((uids.length < ssWidth) ? "short" : "long") + ".\n";
        	}
        	if (names.length != ssWidth) {
        		error += "Names row is too " + ((names.length < ssWidth) ? "short" : "long") + ".\n";
        	}
        	for (var i:int=0; i < uids.length; i++) {
        		if (uidBase.getItemIndex(uids[i]) == -1) {
        			error += "Variable " + names[i] + " not found in design. UID=" + uids[i] + "\n";
        		}
        	}

			// Check data length.
			if (error.length == 0) { // Skip if we have other trouble.
        		for(i=2; i<lines.length; i++) {
        			var line:String = lines[i];
        			if (line != "") { // Ignore blank data lines.
	        			var row:Array = line.split("\t");
	        			// We allow short lines to handle the case where trailing
	        			// values are not specified.  These are not written by
	        			// Excel when saving as a tab-separated file.
	        			if( row.length > ssWidth ) {
	        				error += "Row " + (i+1) + " is too " + ((row.length < ssWidth) ? "short" : "long") 
	        						 + ". [length=" + row.length + "]\n";
	        			}
	        		}
        		}
        	} else {
        		error += "Headers are incorrect.  Data checking not done.\n";
        	}
        	
			return error;			
		}


        private function checkSpreadsheetData(): void {
 			var error:String = this.getSpreadsheetErrorStrings();        	
        	if (error.length == 0) {
        		Alert.show("Data passes check.");
        	} else {
        		Alert.show(error);
        	}
         }

        private function loadSpreadsheetDataToGrid(): void {
        	var error:String = this.getSpreadsheetErrorStrings();        	
        	if (error.length > 0) {
        		Alert.show(error + "\n\nData upload canceled.");
        		return;
        	}
        	
        	var ss:String = this.spreadsheet.text;
        	var re:RegExp = /[\n\r]+/;
        	var lines:Array = ss.split(re);
         	var uids:Array = lines[0].split("\t");
         	var nCols:int = uids.length;

			// Go through the data lines and load the data for all non blank 
			// lines.  Use the column index with the uids line to find the
			// appropriate path to set for the data.
			var dataArray:ArrayCollection = new ArrayCollection;
       		for(var i:int=2; i<lines.length; i++) {
       			var line:String = lines[i];
       			if (line != "") { // Ignore blank data lines.
        			var row:Array = line.split("\t");
        			var rowSize:int = row.length;
        			var datum:Object = new Object();
        			for (var col:int=0; col<nCols; col++) {
        				// Here we set the data for each column
        				// and handle the case where the last values 
        				// are not specified.
        				var value:* = (col < rowSize) ? row[col] : "";
        				// Handle multiple values for region entry.
        				if ((uids[col] as String).search(/\.regions$/) != -1) {
        					value = (value == "") ? [] : (value as String).split(";");
        				}
       					DataUtil.setNestedValue(datum, uids[col], value);
        			}
        			dataArray.addItem(datum);
	        	}
        	}
        	model.experimentData[activeVb.uid] = dataArray;
    
        	this.switchFromSpreadsheet();
        }
        
        private function saveSpreadsheetFile():void {
        	saveFileRef = new FileReference();
        	saveFileRef.addEventListener(Event.COMPLETE, saveCompleted)
        	var defaultFilename:String = activeVb.nameValue.replace(/ /g, "-") + ".txt";
        	saveFileRef.save(this.spreadsheet.text, defaultFilename);
        }
        
        private function saveCompleted(evt:Event):void {
        	saveFileRef = null; // Release resources
        }
        
        private function loadSpreadsheetFile():void {
        	loadFileRef = new FileReference();
        	loadFileRef.addEventListener(Event.SELECT, fileSelected);
 	      	loadFileRef.addEventListener(Event.COMPLETE, loadCompleted)
	       	loadFileRef.addEventListener(FaultEvent.FAULT, faultHandler);
           	loadFileRef.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
        	try {
         		loadFileRef.browse();
            } catch (error:Error) {
            	Alert.show("Error reading file data: " + error, "ERROR");
            }
        }
        
        private function fileSelected(evt:Event):void {
        	// trace("Selected, preparing to load. name=" + fileRef.name + " date=" + fileRef.creationDate);
 	      	try {
        		loadFileRef.load();
         	} catch (error:Error) {
         		Alert.show("Error reading file data: " + error, "ERROR");
          	}
        }
        
        private function loadCompleted(evt:Event):void {
        	// trace("File size = " + fileRef.data.length);
        	try {
        		this.spreadsheet.text = loadFileRef.data.readMultiByte(loadFileRef.data.length, "iso-8859-1");
        		this.checkDataButton.enabled=true;
        		this.loadToGridButton.enabled=true;
        	} catch (error:Error) {
        		Alert.show("Error reading file data: " + error, "ERROR");
        	}
        	loadFileRef=null; // To free data storage.
        }

        private function doDebug(event:Event):void {
        	return;
        }
        
        private function spreadsheetCreatedHandler(event:Event):void {
        	spreadsheet.mx_internal::getTextField().useRichTextClipboard = false;
        }
        
//        private function handleEndEditEvent(event:DataGridEvent):void {
//        	if (false && event.itemRenderer is StructuredEditorComponent) {
//        		(event.itemRenderer as StructuredEditorComponent).updateEditedData(event);
//        	}
//        	return;
//        }

			public function faultHandler(event:FaultEvent):void {
				Alert.show(UiUtil.getFaultURL(event) + "\n"
				           + event.fault.faultString + "\n"
					   + event.fault.faultDetail, 
					   "Error");
			}
		
			public function errorHandler(event:Event):void {
				Alert.show("IO Error: " + event, "Error");
			}

		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _SpreadsheetComponent_State1_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "ConstantSpecification_State";
	temp.overrides = [_SpreadsheetComponent_RemoveChild1_i(), _SpreadsheetComponent_AddChild1_i()];
	return temp;
}

private function _SpreadsheetComponent_RemoveChild1_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_SpreadsheetComponent_RemoveChild1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_SpreadsheetComponent_RemoveChild1", _SpreadsheetComponent_RemoveChild1);
	return temp;
}

private function _SpreadsheetComponent_AddChild1_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_SpreadsheetComponent_VBox2_c);
	_SpreadsheetComponent_AddChild1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_SpreadsheetComponent_AddChild1", _SpreadsheetComponent_AddChild1);
	return temp;
}

private function _SpreadsheetComponent_VBox2_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentHeight = 100.0;
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.VariableTemplateTabs
		        ,
		        id: "_SpreadsheetComponent_VariableTemplateTabs1"
		        ,
		        propertiesFactory: function():Object { return {
		          monotonic: true,
		          enabled: true
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

private function _SpreadsheetComponent_State2_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "ParameterSpecification_State";
	temp.overrides = [_SpreadsheetComponent_RemoveChild2_i(), _SpreadsheetComponent_AddChild2_i()];
	return temp;
}

private function _SpreadsheetComponent_RemoveChild2_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_SpreadsheetComponent_RemoveChild2 = temp;
	mx.binding.BindingManager.executeBindings(this, "_SpreadsheetComponent_RemoveChild2", _SpreadsheetComponent_RemoveChild2);
	return temp;
}

private function _SpreadsheetComponent_AddChild2_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_SpreadsheetComponent_VBox3_c);
	_SpreadsheetComponent_AddChild2 = temp;
	mx.binding.BindingManager.executeBindings(this, "_SpreadsheetComponent_AddChild2", _SpreadsheetComponent_AddChild2);
	return temp;
}

private function _SpreadsheetComponent_VBox3_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentHeight = 100.0;
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: edu.isi.bmkeg.kefed.ui.VariableTemplateTabs
		        ,
		        id: "_SpreadsheetComponent_VariableTemplateTabs2"
		        ,
		        propertiesFactory: function():Object { return {
		          monotonic: true,
		          enabled: true
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

private function _SpreadsheetComponent_State3_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "MeasurementSpecification_State";
	temp.overrides = [_SpreadsheetComponent_RemoveChild3_i(), _SpreadsheetComponent_AddChild3_i()];
	return temp;
}

private function _SpreadsheetComponent_RemoveChild3_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_SpreadsheetComponent_RemoveChild3 = temp;
	mx.binding.BindingManager.executeBindings(this, "_SpreadsheetComponent_RemoveChild3", _SpreadsheetComponent_RemoveChild3);
	return temp;
}

private function _SpreadsheetComponent_AddChild3_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_SpreadsheetComponent_VBox4_c);
	_SpreadsheetComponent_AddChild3 = temp;
	mx.binding.BindingManager.executeBindings(this, "_SpreadsheetComponent_AddChild3", _SpreadsheetComponent_AddChild3);
	return temp;
}

private function _SpreadsheetComponent_VBox4_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentHeight = 100.0;
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.Text
		        ,
		        id: "_SpreadsheetComponent_Text1"
		        ,
		        stylesFactory: function():void {
		          this.fontSize = 14;
		          this.fontWeight = "bold";
		        }
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.DataGrid
		        ,
		        id: "depVbData"
		        ,
		        stylesFactory: function():void {
		          this.headerStyleName = "leftBold";
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          sortableColumns: false,
		          percentWidth: 100.0,
		          percentHeight: 100.0,
		          editable: true,
		          variableRowHeight: true
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.HBox
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              events: {
		                click: "___SpreadsheetComponent_Button1_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Add Row"
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "CopySelectedDataRowButton"
		              ,
		              events: {
		                click: "__CopySelectedDataRowButton_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Copy Row"
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "CopyLastDataRowButton"
		              ,
		              events: {
		                click: "__CopyLastDataRowButton_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Copy Last Row"
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "RemoveDataRowButton"
		              ,
		              events: {
		                click: "__RemoveDataRowButton_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Remove Row"
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Spacer
		              ,
		              propertiesFactory: function():Object { return {
		                percentWidth: 100.0
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "createSpreadsheetButton"
		              ,
		              events: {
		                click: "__createSpreadsheetButton_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Spreadsheet",
		                enabled: true
		              }}
		            })
		          ]
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___SpreadsheetComponent_Button1_click(event:flash.events.MouseEvent):void
{
	handleAddRowEditDependentVariableData()
}

/**
 * @private
 **/
public function __CopySelectedDataRowButton_click(event:flash.events.MouseEvent):void
{
	handleCopySelectedRowEditDependentVariableData()
}

/**
 * @private
 **/
public function __CopyLastDataRowButton_click(event:flash.events.MouseEvent):void
{
	handleCopyLastRowEditDependentVariableData()
}

/**
 * @private
 **/
public function __RemoveDataRowButton_click(event:flash.events.MouseEvent):void
{
	handleRemoveRowEditDependentVariableData()
}

/**
 * @private
 **/
public function __createSpreadsheetButton_click(event:flash.events.MouseEvent):void
{
	switchToSpreadsheet()
}

private function _SpreadsheetComponent_State4_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "Spreadsheet_State";
	temp.overrides = [_SpreadsheetComponent_RemoveChild4_i(), _SpreadsheetComponent_AddChild4_i()];
	return temp;
}

private function _SpreadsheetComponent_RemoveChild4_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_SpreadsheetComponent_RemoveChild4 = temp;
	mx.binding.BindingManager.executeBindings(this, "_SpreadsheetComponent_RemoveChild4", _SpreadsheetComponent_RemoveChild4);
	return temp;
}

private function _SpreadsheetComponent_AddChild4_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_SpreadsheetComponent_VBox5_c);
	_SpreadsheetComponent_AddChild4 = temp;
	mx.binding.BindingManager.executeBindings(this, "_SpreadsheetComponent_AddChild4", _SpreadsheetComponent_AddChild4);
	return temp;
}

private function _SpreadsheetComponent_VBox5_c() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	temp.percentHeight = 100.0;
	temp.percentWidth = 100.0;
	if (!temp.document) temp.document = this;
	temp.mx_internal::_documentDescriptor = 
		new mx.core.UIComponentDescriptor({
		  type: mx.containers.VBox
		  ,
		  propertiesFactory: function():Object { return {
		    childDescriptors: [
		      new mx.core.UIComponentDescriptor({
		        type: mx.controls.TextArea
		        ,
		        id: "spreadsheet"
		        ,
		        events: {
		          creationComplete: "__spreadsheet_creationComplete"
		        }
		        ,
		        propertiesFactory: function():Object { return {
		          percentHeight: 100.0,
		          percentWidth: 100.0
		        }}
		      })
		    ,
		      new mx.core.UIComponentDescriptor({
		        type: mx.containers.HBox
		        ,
		        propertiesFactory: function():Object { return {
		          percentWidth: 100.0,
		          childDescriptors: [
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              events: {
		                click: "___SpreadsheetComponent_Button6_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Save File"
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              events: {
		                click: "___SpreadsheetComponent_Button7_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Load File"
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Spacer
		              ,
		              propertiesFactory: function():Object { return {
		                percentWidth: 100.0
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "checkDataButton"
		              ,
		              events: {
		                click: "__checkDataButton_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Check Data",
		                enabled: false
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              id: "loadToGridButton"
		              ,
		              events: {
		                click: "__loadToGridButton_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Load to Grid",
		                enabled: false
		              }}
		            })
		          ,
		            new mx.core.UIComponentDescriptor({
		              type: mx.controls.Button
		              ,
		              events: {
		                click: "___SpreadsheetComponent_Button10_click"
		              }
		              ,
		              propertiesFactory: function():Object { return {
		                label: "Cancel Batch"
		              }}
		            })
		          ]
		        }}
		      })
		    ]
		  }}
		})
	;
	temp.mx_internal::_documentDescriptor.document = this;
	return temp;
}

/**
 * @private
 **/
public function __spreadsheet_creationComplete(event:mx.events.FlexEvent):void
{
	spreadsheetCreatedHandler(event)
}

/**
 * @private
 **/
public function ___SpreadsheetComponent_Button6_click(event:flash.events.MouseEvent):void
{
	saveSpreadsheetFile()
}

/**
 * @private
 **/
public function ___SpreadsheetComponent_Button7_click(event:flash.events.MouseEvent):void
{
	loadSpreadsheetFile()
}

/**
 * @private
 **/
public function __checkDataButton_click(event:flash.events.MouseEvent):void
{
	checkSpreadsheetData()
}

/**
 * @private
 **/
public function __loadToGridButton_click(event:flash.events.MouseEvent):void
{
	loadSpreadsheetDataToGrid()
}

/**
 * @private
 **/
public function ___SpreadsheetComponent_Button10_click(event:flash.events.MouseEvent):void
{
	switchFromSpreadsheet()
}

/**
 * @private
 **/
public function ___SpreadsheetComponent_VBox1_preinitialize(event:mx.events.FlexEvent):void
{
	preinit()
}

/**
 * @private
 **/
public function __diagram_creationComplete(event:mx.events.FlexEvent):void
{
	initDiagram();
}

/**
 * @private
 **/
public function __modelName_valueCommit(event:mx.events.FlexEvent):void
{
	{model.modelName = modelName.text}
}

/**
 * @private
 **/
public function __modelSource_valueCommit(event:mx.events.FlexEvent):void
{
	{model.source = modelSource.text}
}

/**
 * @private
 **/
public function __modelCitation_valueCommit(event:mx.events.FlexEvent):void
{
	{model.citeKey = modelCitation.text}
}

/**
 * @private
 **/
public function ___SpreadsheetComponent_Button11_click(event:flash.events.MouseEvent):void
{
	showModelPowerLoom(event)
}

/**
 * @private
 **/
public function ___SpreadsheetComponent_Button12_click(event:flash.events.MouseEvent):void
{
	saveCurrentModel(event, false)
}

/**
 * @private
 **/
public function ___SpreadsheetComponent_Button13_click(event:flash.events.MouseEvent):void
{
	saveCurrentModel(event, true)
}

/**
 * @private
 **/
public function ___SpreadsheetComponent_Button14_click(event:flash.events.MouseEvent):void
{
	cancelSave(event)
}

/**
 * @private
 **/
public function __cntrlVbGrid_click(event:flash.events.MouseEvent):void
{
	selectListElement(event);
}

/**
 * @private
 **/
public function __indepVbGrid_click(event:flash.events.MouseEvent):void
{
	selectListElement(event);
}

/**
 * @private
 **/
public function __depVbGrid_click(event:flash.events.MouseEvent):void
{
	selectListElement(event);
}

/**
 * @private
 **/
public function __descriptionField_valueCommit(event:mx.events.FlexEvent):void
{
	{model.description = descriptionField.text}
}


    //  binding mgmt
    private function _SpreadsheetComponent_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_RemoveChild1.target"
            , "activeObjectForm");

        result[1] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_AddChild1.relativeTo"
            , "dataGrid");

        result[2] = new mx.binding.Binding(this,
            function():edu.isi.bmkeg.kefed.elements.KefedObject
            {

                return (activeVb);
            },
            null,
            "_SpreadsheetComponent_VariableTemplateTabs1.myObject"
            );

        result[3] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_VariableTemplateTabs1.diagram"
            , "diagram");

        result[4] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_VariableTemplateTabs1.termLookupService"
            , "termLookupService");

        result[5] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_RemoveChild2.target"
            , "activeObjectForm");

        result[6] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_AddChild2.relativeTo"
            , "dataGrid");

        result[7] = new mx.binding.Binding(this,
            function():edu.isi.bmkeg.kefed.elements.KefedObject
            {

                return (activeVb);
            },
            null,
            "_SpreadsheetComponent_VariableTemplateTabs2.myObject"
            );

        result[8] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_VariableTemplateTabs2.diagram"
            , "diagram");

        result[9] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_VariableTemplateTabs2.termLookupService"
            , "termLookupService");

        result[10] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_RemoveChild3.target"
            , "activeObjectForm");

        result[11] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_AddChild3.relativeTo"
            , "dataGrid");

        result[12] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (activeVb.nameValue);
                return (result == undefined ? null : String(result));
            },
            null,
            "_SpreadsheetComponent_Text1.text"
            );

        result[13] = new mx.binding.Binding(this,
            function():Object
            {

                return (dataTable);
            },
            null,
            "depVbData.dataProvider"
            );

        result[14] = new mx.binding.Binding(this,
            function():Array
            {
                var result:* = (dataColumns);
                return ((result == null) || (result is Array) || (result is flash.utils.Proxy) ? result : [result]);
            },
            null,
            "depVbData.columns"
            );

        result[15] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (ScrollPolicy.ON);
                return (result == undefined ? null : String(result));
            },
            null,
            "depVbData.horizontalScrollPolicy"
            );

        result[16] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (depVbData.selectedIndex != -1);
            },
            null,
            "CopySelectedDataRowButton.enabled"
            );

        result[17] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (dataTable.length > 0);
            },
            null,
            "CopyLastDataRowButton.enabled"
            );

        result[18] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (depVbData.selectedIndex != -1);
            },
            null,
            "RemoveDataRowButton.enabled"
            );

        result[19] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_RemoveChild4.target"
            , "activeObjectForm");

        result[20] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_AddChild4.relativeTo"
            , "dataGrid");

        result[21] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (model.modelName);
                return (result == undefined ? null : String(result));
            },
            null,
            "flatPanel.title"
            );

        result[22] = new mx.binding.Binding(this,
            function():Number
            {

                return (flatPanel.getStyle('borderAlpha'));
            },
            function(_sourceFunctionReturnValue:Number):void
            {
                flatPanel.setStyle("backgroundAlpha", _sourceFunctionReturnValue);
            },
            "flatPanel.backgroundAlpha"
            );

        result[23] = new mx.binding.Binding(this,
            function():uint
            {

                return (flatPanel.getStyle('borderColor'));
            },
            function(_sourceFunctionReturnValue:uint):void
            {
                flatPanel.setStyle("backgroundColor", _sourceFunctionReturnValue);
            },
            "flatPanel.backgroundColor"
            );

        result[24] = new mx.binding.Binding(this,
            null,
            null,
            "zoomControl.diagram"
            , "diagram");

        result[25] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (model.type);
                return (result == undefined ? null : String(result));
            },
            null,
            "_SpreadsheetComponent_Label1.text"
            );

        result[26] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (model.modelName);
                return (result == undefined ? null : String(result));
            },
            null,
            "modelName.text"
            );

        result[27] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (model.source);
                return (result == undefined ? null : String(result));
            },
            null,
            "modelSource.text"
            );

        result[28] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (model.citeKey);
                return (result == undefined ? null : String(result));
            },
            null,
            "modelCitation.text"
            );

        result[29] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_Button12.enabled"
            , "saveAllowed");

        result[30] = new mx.binding.Binding(this,
            null,
            null,
            "_SpreadsheetComponent_Button13.enabled"
            , "saveAllowed");

        result[31] = new mx.binding.Binding(this,
            function():Number
            {

                return (indepVaribleList.getStyle('borderAlpha'));
            },
            function(_sourceFunctionReturnValue:Number):void
            {
                cntrlVaribleList.setStyle("backgroundAlpha", _sourceFunctionReturnValue);
            },
            "cntrlVaribleList.backgroundAlpha"
            );

        result[32] = new mx.binding.Binding(this,
            function():uint
            {

                return (indepVaribleList.getStyle('borderColor'));
            },
            function(_sourceFunctionReturnValue:uint):void
            {
                cntrlVaribleList.setStyle("backgroundColor", _sourceFunctionReturnValue);
            },
            "cntrlVaribleList.backgroundColor"
            );

        result[33] = new mx.binding.Binding(this,
            function():Object
            {

                return (cntrlVbs);
            },
            null,
            "cntrlVbGrid.dataProvider"
            );

        result[34] = new mx.binding.Binding(this,
            function():Number
            {

                return (indepVaribleList.getStyle('borderAlpha'));
            },
            function(_sourceFunctionReturnValue:Number):void
            {
                indepVaribleList.setStyle("backgroundAlpha", _sourceFunctionReturnValue);
            },
            "indepVaribleList.backgroundAlpha"
            );

        result[35] = new mx.binding.Binding(this,
            function():uint
            {

                return (indepVaribleList.getStyle('borderColor'));
            },
            function(_sourceFunctionReturnValue:uint):void
            {
                indepVaribleList.setStyle("backgroundColor", _sourceFunctionReturnValue);
            },
            "indepVaribleList.backgroundColor"
            );

        result[36] = new mx.binding.Binding(this,
            function():Object
            {

                return (indepVbs);
            },
            null,
            "indepVbGrid.dataProvider"
            );

        result[37] = new mx.binding.Binding(this,
            function():Number
            {

                return (depVaribleList.getStyle('borderAlpha'));
            },
            function(_sourceFunctionReturnValue:Number):void
            {
                depVaribleList.setStyle("backgroundAlpha", _sourceFunctionReturnValue);
            },
            "depVaribleList.backgroundAlpha"
            );

        result[38] = new mx.binding.Binding(this,
            function():uint
            {

                return (depVaribleList.getStyle('borderColor'));
            },
            function(_sourceFunctionReturnValue:uint):void
            {
                depVaribleList.setStyle("backgroundColor", _sourceFunctionReturnValue);
            },
            "depVaribleList.backgroundColor"
            );

        result[39] = new mx.binding.Binding(this,
            function():Object
            {

                return (depVbs);
            },
            null,
            "depVbGrid.dataProvider"
            );

        result[40] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (model.description);
                return (result == undefined ? null : String(result));
            },
            null,
            "descriptionField.text"
            );

        result[41] = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (model.dateTime);
                return (result == undefined ? null : String(result));
            },
            null,
            "_SpreadsheetComponent_Text3.text"
            );


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (SpreadsheetComponent)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;

    //  initialize style defs for SpreadsheetComponent

    mx_internal var _SpreadsheetComponent_StylesInit_done:Boolean = false;

    mx_internal function _SpreadsheetComponent_StylesInit():void
    {
        //  only add our style defs to the style manager once
        if (mx_internal::_SpreadsheetComponent_StylesInit_done)
            return;
        else
            mx_internal::_SpreadsheetComponent_StylesInit_done = true;
            
        var style:CSSStyleDeclaration;
        var effects:Array;
                    

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;
        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "rightBold");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .rightBold
        style = styleManager.getStyleDeclaration(".rightBold");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.textAlign = "right";
                this.fontWeight = "bold";
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "centerBold");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .centerBold
        style = styleManager.getStyleDeclaration(".centerBold");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.textAlign = "center";
                this.fontWeight = "bold";
            };
        }




        selector = null;
        conditions = null;
        conditions = [];
        condition = new CSSCondition("class", "leftBold");
        conditions.push(condition); 
        selector = new CSSSelector("", conditions, selector);
        // .leftBold
        style = styleManager.getStyleDeclaration(".leftBold");
        if (!style)
        {
            style = new CSSStyleDeclaration(selector, styleManager);
        }

        if (style.factory == null)
        {
            style.factory = function():void
            {
                this.textAlign = "left";
                this.fontWeight = "bold";
            };
        }





    }


    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
