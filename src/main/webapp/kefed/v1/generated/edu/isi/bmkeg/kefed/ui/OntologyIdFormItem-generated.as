
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    edu.isi.bmkeg.kefed.ui
 *  Class:      OntologyIdFormItem
 *  Source:     /Users/Gully/Documents/Projects/2_active/IEDB/work/kefedEditor/src/main/flex/edu/isi/bmkeg/kefed/ui/OntologyIdFormItem.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2017.08.30 16:17:00 PDT
 */

package edu.isi.bmkeg.kefed.ui
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filters.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.HBox;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.DataGrid;
import mx.controls.Spacer;
import mx.controls.TileList;
import mx.controls.dataGridClasses.DataGridColumn;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.styles.*;



//  begin class def
public class OntologyIdFormItem
    extends mx.containers.VBox
    implements mx.binding.IBindingClient
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var clearTermButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var removeTermButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var searchTermButton : mx.controls.Button;

    [Bindable]
	/**
 * @private
 **/
    public var termGrid : mx.controls.TileList;

    [Bindable]
	/**
 * @private
 **/
    public var termList : mx.controls.DataGrid;


    //  type-import dummies


    //  Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.VBox
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.controls.TileList
        ,
        id: "termGrid"
        ,
        events: {
          valueCommit: "__termGrid_valueCommit"
        }
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          labelField: "displayName",
          percentHeight: 30.0,
          dataTipField: "description",
          showDataTips: true
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.controls.DataGrid
        ,
        id: "termList"
        ,
        propertiesFactory: function():Object { return {
          percentHeight: 50.0,
          minHeight: 70,
          percentWidth: 100.0,
          editable: true,
          variableRowHeight: true,
          wordWrap: true,
          verticalScrollPolicy: "auto",
          columns: [_OntologyIdFormItem_DataGridColumn1_c(), _OntologyIdFormItem_DataGridColumn2_c(), _OntologyIdFormItem_DataGridColumn3_c(), _OntologyIdFormItem_DataGridColumn4_c()]
        }}
      })
    ,
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HBox
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              id: "searchTermButton"
              ,
              events: {
                click: "__searchTermButton_click"
              }
              ,
              propertiesFactory: function():Object { return {
                label: "Search"
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Spacer
              ,
              propertiesFactory: function():Object { return {
                width: 10
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              id: "removeTermButton"
              ,
              events: {
                click: "__removeTermButton_click"
              }
              ,
              propertiesFactory: function():Object { return {
                label: "Remove"
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              id: "clearTermButton"
              ,
              events: {
                click: "__clearTermButton_click"
              }
              ,
              propertiesFactory: function():Object { return {
                label: "Clear"
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Spacer
              ,
              propertiesFactory: function():Object { return {
                width: 10
              }}
            })
          ]
        }}
      })
    ]
  }}
})

    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function OntologyIdFormItem()
    {
        super();

        mx_internal::_document = this;


        var bindings:Array = _OntologyIdFormItem_bindingsSetup();
        var watchers:Array = [];

        var target:Object = this;

        if (_watcherSetupUtil == null)
        {
            var watcherSetupUtilClass:Object = getDefinitionByName("_edu_isi_bmkeg_kefed_ui_OntologyIdFormItemWatcherSetupUtil");
            watcherSetupUtilClass["init"](null);
        }

        _watcherSetupUtil.setup(this,
                    function(propertyName:String):* { return target[propertyName]; },
                    function(propertyName:String):* { return OntologyIdFormItem[propertyName]; },
                    bindings,
                    watchers);

        mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
        mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


        // layer initializers

       
        // properties
        this.percentWidth = 100.0;


        // events


        for (var i:uint = 0; i < bindings.length; i++)
        {
            Binding(bindings[i]).execute();
        }


    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings



                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {
        mx_internal::setDocumentDescriptor(_documentDescriptor_);


        super.initialize();
    }


    //  scripts
    //  <Script>, line 10 - 72

		import mx.events.CloseEvent;
		import flare.vis.data.DataList;
		import edu.isi.bmkeg.kefed.ontology.OntologyTermReference;
		import mx.events.ListEvent;
		import mx.core.Application;
	
	import mx.events.FlexEvent;
	import mx.managers.PopUpManager;
	import mx.collections.ArrayCollection;
	
	import com.kapit.diagram.view.DiagramObject;
	import com.kapit.diagram.view.DiagramView;
	
	import edu.isi.bmkeg.kefed.ontology.OntologySearchEvent;
	import edu.isi.bmkeg.kefed.ontology.OntologySearchInterface;
	import edu.isi.bmkeg.kefed.ontology.OntologyTermLookupDialog;
	
	import edu.isi.bmkeg.kefed.elements.KefedObject;
	import edu.isi.bmkeg.kefed.elements.KefedFieldTemplate;
	import edu.isi.bmkeg.kefed.elements.IKefedNamedObject;
	
	[Bindable]
	public var termLookupService:OntologySearchInterface;
	
	[Bindable]
	public var myObject:IKefedNamedObject;

	private var dialog:OntologyTermLookupDialog;

	/** Remove all ontology Id terms
	 */
	private function clearTerms():void {
		myObject.ontologyIds.removeAll();
	}
	
	/** Remove selected ontology term from the list of terms.
	 */
	private function removeTerm():void {
		var i:int = termList.selectedIndex;
		if (i >= 0) {
			var obj:Object = myObject.ontologyIds.getItemAt(i);
			myObject.ontologyIds.removeItemAt(i);
			UiUtil.adjustTileSizeForRemovedItem(termGrid, obj);
		}
	}
	
	
	/** Create and popup a dialog to search for terms based on the name of 
	 *  the current object.  This will cause a pop-up dialog
	 *  to appear for choosing the ontology search items.  The dialog will
	 *  allow replacement or addition of terms matching a specified search
	 *  string, which is initially the name of the object.
	 */	 
	private function doSearch():void {
		termList.selectedIndex = -1;
		OntologyTermLookupDialog.showDialog(this.parentApplication as Application,
		                                    myObject,
		                                    termLookupService);
	}
    
 
	

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
/**
 * @private
 **/
public function __termGrid_valueCommit(event:mx.events.FlexEvent):void
{
	UiUtil.adjustTileSizeToFit(termGrid);
}

private function _OntologyIdFormItem_DataGridColumn1_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.dataField = "displayName";
	temp.headerText = "Name";
	temp.editable = false;
	return temp;
}

private function _OntologyIdFormItem_DataGridColumn2_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.dataField = "description";
	temp.headerText = "Description";
	temp.editable = false;
	return temp;
}

private function _OntologyIdFormItem_DataGridColumn3_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.dataField = "termId";
	temp.headerText = "ID";
	temp.editable = false;
	return temp;
}

private function _OntologyIdFormItem_DataGridColumn4_c() : mx.controls.dataGridClasses.DataGridColumn
{
	var temp : mx.controls.dataGridClasses.DataGridColumn = new mx.controls.dataGridClasses.DataGridColumn();
	temp.dataField = "ontologyDisplayName";
	temp.headerText = "Ontology";
	temp.editable = false;
	return temp;
}

/**
 * @private
 **/
public function __searchTermButton_click(event:flash.events.MouseEvent):void
{
	doSearch();
}

/**
 * @private
 **/
public function __removeTermButton_click(event:flash.events.MouseEvent):void
{
	removeTerm();
}

/**
 * @private
 **/
public function __clearTermButton_click(event:flash.events.MouseEvent):void
{
	clearTerms();
}


    //  binding mgmt
    private function _OntologyIdFormItem_bindingsSetup():Array
    {
        var result:Array = [];

        result[0] = new mx.binding.Binding(this,
            function():Object
            {

                return (myObject.ontologyIds);
            },
            null,
            "termGrid.dataProvider"
            );

        result[1] = new mx.binding.Binding(this,
            function():Object
            {

                return (myObject.ontologyIds);
            },
            null,
            "termList.dataProvider"
            );

        result[2] = new mx.binding.Binding(this,
            function():Boolean
            {

                return (termList.selectedIndex != -1);
            },
            null,
            "removeTermButton.enabled"
            );


        return result;
    }


    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil2):void
    {
        (OntologyIdFormItem)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil2;



    //  embed carrier vars
    //  end embed carrier vars

    //  binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//  end class def
}

//  end package def
}
